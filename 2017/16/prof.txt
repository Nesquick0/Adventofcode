Command line: ['16.py']
Total duration: 23.3386s
File: 16.py
File duration: 23.3381s (100.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         3|            0|            0|  0.00%|def processInput(origInput):
     2|         1|            0|            0|  0.00%|  input = []
     3|     10001|     0.069546|   6.9539e-06|  0.30%|  for cmd in origInput:
     4|     10000|    0.0830579|  8.30579e-06|  0.36%|    if (cmd[0] == "s"):
     5|      3102|    0.0290165|  9.35412e-06|  0.12%|      value = int(cmd[1:])
     6|      3102|    0.0315256|   1.0163e-05|  0.14%|      input.append( (1, value) )
     7|      6898|    0.0445266|    6.455e-06|  0.19%|    elif (cmd[0] == "x"):
     8|      4680|    0.0470316|  1.00495e-05|  0.20%|      values = list(map(int, cmd[1:].split("/")))
     9|      4680|    0.0410285|  8.76677e-06|  0.18%|      input.append( (2, values[0], values[1]) )
    10|      2218|    0.0180156|  8.12246e-06|  0.08%|    elif (cmd[0] == "p"):
    11|      2218|    0.0210133|  9.47397e-06|  0.09%|      names = cmd[1:].split("/")
    12|      2218|    0.0165074|  7.44246e-06|  0.07%|      input.append( (3, names[0], names[1]) )
    13|         1|            0|            0|  0.00%|  return input
    14|         0|            0|            0|  0.00%|
    15|         0|            0|            0|  0.00%|
    16|        52|  0.000499964|  9.61469e-06|  0.00%|def dance(progs, input):
    17|    510051|       3.9817|  7.80647e-06| 17.06%|  for i in range(len(input)):
    18|    510000|      3.95205|  7.74913e-06| 16.93%|    cmd = input[i]
    19|    510000|      4.06013|  7.96103e-06| 17.40%|    if (cmd[0] == 1):
    20|    158202|      1.38588|  8.76021e-06|  5.94%|      progs = progs[-cmd[1]:] + progs[:-cmd[1]]
    21|    351798|      2.78338|  7.91186e-06| 11.93%|    elif (cmd[0] == 2):
    22|    238680|      1.95536|  8.19239e-06|  8.38%|      swappers = (progs[cmd[1]], progs[cmd[2]])
    23|    238680|      1.93992|  8.12768e-06|  8.31%|      progs[cmd[1]], progs[cmd[2]] = swappers[1], swappers[0]
    24|    113118|     0.876084|  7.74487e-06|  3.75%|    elif (cmd[0] == 3):
    25|    113118|      1.00115|  8.85047e-06|  4.29%|      indices = (progs.index(cmd[1]), progs.index(cmd[2]))
    26|    113118|     0.996197|   8.8067e-06|  4.27%|      progs[indices[0]], progs[indices[1]] = progs[indices[1]], progs[indices[0]]
    27|         0|            0|            0|  0.00%|
    28|        51|   0.00150132|  2.94377e-05|  0.01%|  return progs
    29|         0|            0|            0|  0.00%|
    30|         0|            0|            0|  0.00%|
    31|         2|  0.000500202|  0.000250101|  0.00%|def main():
    32|         1|            0|            0|  0.00%|  with open("input", "r") as file:
(call)|         1|            0|            0|  0.00%|# C:\Python36-32\lib\_bootlocale.py:11 getpreferredencoding
(call)|         1|            0|            0|  0.00%|# C:\Python36-32\lib\codecs.py:259 __init__
    33|         1|   0.00100064|   0.00100064|  0.00%|    input = file.readline().strip().split(",")
(call)|         6|            0|            0|  0.00%|# C:\Python36-32\lib\codecs.py:280 getstate
(call)|         6|            0|            0|  0.00%|# C:\Python36-32\lib\encodings\cp1250.py:22 decode
    34|         0|            0|            0|  0.00%|
    35|         1|            0|            0|  0.00%|  input = processInput(input)
(call)|         1|     0.401269|     0.401269|  1.72%|# 16.py:1 processInput
    36|         0|            0|            0|  0.00%|
    37|         1|            0|            0|  0.00%|  count = 16
    38|         1|            0|            0|  0.00%|  progs = []
    39|        17|  0.000499725|  2.93956e-05|  0.00%|  for i in range(count):
    40|        16|            0|            0|  0.00%|    progs.append(chr(ord("a")+i))
    41|         0|            0|            0|  0.00%|
    42|         1|            0|            0|  0.00%|  print("".join(progs))
    43|         0|            0|            0|  0.00%|
    44|         0|            0|            0|  0.00%|  # Part 1
    45|         1|            0|            0|  0.00%|  progs1 = dance(progs[:], input)
(call)|         1|     0.422782|     0.422782|  1.81%|# 16.py:16 dance
    46|         1|            0|            0|  0.00%|  print("".join(progs1))
    47|         0|            0|            0|  0.00%|
    48|         0|            0|            0|  0.00%|  # Part 2
    49|         0|            0|            0|  0.00%|  # progs2 = progs1[:]
    50|         0|            0|            0|  0.00%|  # targetIndices = progs[:]
    51|         0|            0|            0|  0.00%|  # for i in range(count):
    52|         0|            0|            0|  0.00%|    # targetIndices[i] = progs1.index(targetIndices[i])
    53|         0|            0|            0|  0.00%|
    54|         0|            0|            0|  0.00%|  # # Repeat dances.
    55|         0|            0|            0|  0.00%|  # for nDances in range(1):
    56|         0|            0|            0|  0.00%|    # progs2New = progs2[:]
    57|         0|            0|            0|  0.00%|    # for i in range(count):
    58|         0|            0|            0|  0.00%|      # progs2New[i] = progs2[targetIndices[i]]
    59|         0|            0|            0|  0.00%|    # print(targetIndices)
    60|         0|            0|            0|  0.00%|    # progs2 = progs2New
    61|         0|            0|            0|  0.00%|
    62|         0|            0|            0|  0.00%|  # print("".join(progs2))
    63|         0|            0|            0|  0.00%|  # progs3 = dance(progs1[:], input)
    64|         0|            0|            0|  0.00%|  # print("".join(progs3))
    65|         0|            0|            0|  0.00%|
    66|         1|            0|            0|  0.00%|  progs2 = progs[:]
    67|        51|  0.000499964|  9.80321e-06|  0.00%|  for i in range(50):
    68|        50|  0.000500441|  1.00088e-05|  0.00%|    progs2 = dance(progs2[:], input)
(call)|        50|      22.5111|     0.450221| 96.45%|# 16.py:16 dance
    69|         0|            0|            0|  0.00%|
    70|         1|            0|            0|  0.00%|  print("".join(progs2))
    71|         0|            0|            0|  0.00%|
    72|         0|            0|            0|  0.00%|
    73|         0|            0|            0|  0.00%|
    74|         1|            0|            0|  0.00%|if (__name__ == "__main__"):
    75|         1|            0|            0|  0.00%|  main()
(call)|         1|      23.3376|      23.3376|100.00%|# 16.py:31 main
File: C:\Python36-32\lib\codecs.py
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|""" codecs -- Python Codec Registry, API and helpers.
     2|         0|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|Written by Marc-Andre Lemburg (mal@lemburg.com).
     5|         0|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|(c) Copyright CNRI, All Rights Reserved. NO WARRANTY.
     7|         0|            0|            0|  0.00%|
     8|         0|            0|            0|  0.00%|"""#"
     9|         0|            0|            0|  0.00%|
    10|         0|            0|            0|  0.00%|import builtins, sys
    11|         0|            0|            0|  0.00%|
    12|         0|            0|            0|  0.00%|### Registry and builtin stateless codec functions
    13|         0|            0|            0|  0.00%|
    14|         0|            0|            0|  0.00%|try:
    15|         0|            0|            0|  0.00%|    from _codecs import *
    16|         0|            0|            0|  0.00%|except ImportError as why:
    17|         0|            0|            0|  0.00%|    raise SystemError('Failed to load the builtin codecs: %s' % why)
    18|         0|            0|            0|  0.00%|
    19|         0|            0|            0|  0.00%|__all__ = ["register", "lookup", "open", "EncodedFile", "BOM", "BOM_BE",
    20|         0|            0|            0|  0.00%|           "BOM_LE", "BOM32_BE", "BOM32_LE", "BOM64_BE", "BOM64_LE",
    21|         0|            0|            0|  0.00%|           "BOM_UTF8", "BOM_UTF16", "BOM_UTF16_LE", "BOM_UTF16_BE",
    22|         0|            0|            0|  0.00%|           "BOM_UTF32", "BOM_UTF32_LE", "BOM_UTF32_BE",
    23|         0|            0|            0|  0.00%|           "CodecInfo", "Codec", "IncrementalEncoder", "IncrementalDecoder",
    24|         0|            0|            0|  0.00%|           "StreamReader", "StreamWriter",
    25|         0|            0|            0|  0.00%|           "StreamReaderWriter", "StreamRecoder",
    26|         0|            0|            0|  0.00%|           "getencoder", "getdecoder", "getincrementalencoder",
    27|         0|            0|            0|  0.00%|           "getincrementaldecoder", "getreader", "getwriter",
    28|         0|            0|            0|  0.00%|           "encode", "decode", "iterencode", "iterdecode",
    29|         0|            0|            0|  0.00%|           "strict_errors", "ignore_errors", "replace_errors",
    30|         0|            0|            0|  0.00%|           "xmlcharrefreplace_errors",
    31|         0|            0|            0|  0.00%|           "backslashreplace_errors", "namereplace_errors",
    32|         0|            0|            0|  0.00%|           "register_error", "lookup_error"]
    33|         0|            0|            0|  0.00%|
    34|         0|            0|            0|  0.00%|### Constants
    35|         0|            0|            0|  0.00%|
    36|         0|            0|            0|  0.00%|#
    37|         0|            0|            0|  0.00%|# Byte Order Mark (BOM = ZERO WIDTH NO-BREAK SPACE = U+FEFF)
    38|         0|            0|            0|  0.00%|# and its possible byte string values
    39|         0|            0|            0|  0.00%|# for UTF8/UTF16/UTF32 output and little/big endian machines
    40|         0|            0|            0|  0.00%|#
    41|         0|            0|            0|  0.00%|
    42|         0|            0|            0|  0.00%|# UTF-8
    43|         0|            0|            0|  0.00%|BOM_UTF8 = b'\xef\xbb\xbf'
    44|         0|            0|            0|  0.00%|
    45|         0|            0|            0|  0.00%|# UTF-16, little endian
    46|         0|            0|            0|  0.00%|BOM_LE = BOM_UTF16_LE = b'\xff\xfe'
    47|         0|            0|            0|  0.00%|
    48|         0|            0|            0|  0.00%|# UTF-16, big endian
    49|         0|            0|            0|  0.00%|BOM_BE = BOM_UTF16_BE = b'\xfe\xff'
    50|         0|            0|            0|  0.00%|
    51|         0|            0|            0|  0.00%|# UTF-32, little endian
    52|         0|            0|            0|  0.00%|BOM_UTF32_LE = b'\xff\xfe\x00\x00'
    53|         0|            0|            0|  0.00%|
    54|         0|            0|            0|  0.00%|# UTF-32, big endian
    55|         0|            0|            0|  0.00%|BOM_UTF32_BE = b'\x00\x00\xfe\xff'
    56|         0|            0|            0|  0.00%|
    57|         0|            0|            0|  0.00%|if sys.byteorder == 'little':
    58|         0|            0|            0|  0.00%|
    59|         0|            0|            0|  0.00%|    # UTF-16, native endianness
    60|         0|            0|            0|  0.00%|    BOM = BOM_UTF16 = BOM_UTF16_LE
    61|         0|            0|            0|  0.00%|
    62|         0|            0|            0|  0.00%|    # UTF-32, native endianness
    63|         0|            0|            0|  0.00%|    BOM_UTF32 = BOM_UTF32_LE
    64|         0|            0|            0|  0.00%|
    65|         0|            0|            0|  0.00%|else:
    66|         0|            0|            0|  0.00%|
    67|         0|            0|            0|  0.00%|    # UTF-16, native endianness
    68|         0|            0|            0|  0.00%|    BOM = BOM_UTF16 = BOM_UTF16_BE
    69|         0|            0|            0|  0.00%|
    70|         0|            0|            0|  0.00%|    # UTF-32, native endianness
    71|         0|            0|            0|  0.00%|    BOM_UTF32 = BOM_UTF32_BE
    72|         0|            0|            0|  0.00%|
    73|         0|            0|            0|  0.00%|# Old broken names (don't use in new code)
    74|         0|            0|            0|  0.00%|BOM32_LE = BOM_UTF16_LE
    75|         0|            0|            0|  0.00%|BOM32_BE = BOM_UTF16_BE
    76|         0|            0|            0|  0.00%|BOM64_LE = BOM_UTF32_LE
    77|         0|            0|            0|  0.00%|BOM64_BE = BOM_UTF32_BE
    78|         0|            0|            0|  0.00%|
    79|         0|            0|            0|  0.00%|
    80|         0|            0|            0|  0.00%|### Codec base classes (defining the API)
    81|         0|            0|            0|  0.00%|
    82|         0|            0|            0|  0.00%|class CodecInfo(tuple):
    83|         0|            0|            0|  0.00%|    """Codec details when looking up the codec registry"""
    84|         0|            0|            0|  0.00%|
    85|         0|            0|            0|  0.00%|    # Private API to allow Python 3.4 to blacklist the known non-Unicode
    86|         0|            0|            0|  0.00%|    # codecs in the standard library. A more general mechanism to
    87|         0|            0|            0|  0.00%|    # reliably distinguish test encodings from other codecs will hopefully
    88|         0|            0|            0|  0.00%|    # be defined for Python 3.5
    89|         0|            0|            0|  0.00%|    #
    90|         0|            0|            0|  0.00%|    # See http://bugs.python.org/issue19619
    91|         0|            0|            0|  0.00%|    _is_text_encoding = True # Assume codecs are text encodings by default
    92|         0|            0|            0|  0.00%|
    93|         0|            0|            0|  0.00%|    def __new__(cls, encode, decode, streamreader=None, streamwriter=None,
    94|         0|            0|            0|  0.00%|        incrementalencoder=None, incrementaldecoder=None, name=None,
    95|         0|            0|            0|  0.00%|        *, _is_text_encoding=None):
    96|         0|            0|            0|  0.00%|        self = tuple.__new__(cls, (encode, decode, streamreader, streamwriter))
    97|         0|            0|            0|  0.00%|        self.name = name
    98|         0|            0|            0|  0.00%|        self.encode = encode
    99|         0|            0|            0|  0.00%|        self.decode = decode
   100|         0|            0|            0|  0.00%|        self.incrementalencoder = incrementalencoder
   101|         0|            0|            0|  0.00%|        self.incrementaldecoder = incrementaldecoder
   102|         0|            0|            0|  0.00%|        self.streamwriter = streamwriter
   103|         0|            0|            0|  0.00%|        self.streamreader = streamreader
   104|         0|            0|            0|  0.00%|        if _is_text_encoding is not None:
   105|         0|            0|            0|  0.00%|            self._is_text_encoding = _is_text_encoding
   106|         0|            0|            0|  0.00%|        return self
   107|         0|            0|            0|  0.00%|
   108|         0|            0|            0|  0.00%|    def __repr__(self):
   109|         0|            0|            0|  0.00%|        return "<%s.%s object for encoding %s at %#x>" % \
   110|         0|            0|            0|  0.00%|                (self.__class__.__module__, self.__class__.__qualname__,
   111|         0|            0|            0|  0.00%|                 self.name, id(self))
   112|         0|            0|            0|  0.00%|
   113|         0|            0|            0|  0.00%|class Codec:
   114|         0|            0|            0|  0.00%|
   115|         0|            0|            0|  0.00%|    """ Defines the interface for stateless encoders/decoders.
   116|         0|            0|            0|  0.00%|
   117|         0|            0|            0|  0.00%|        The .encode()/.decode() methods may use different error
   118|         0|            0|            0|  0.00%|        handling schemes by providing the errors argument. These
   119|         0|            0|            0|  0.00%|        string values are predefined:
   120|         0|            0|            0|  0.00%|
   121|         0|            0|            0|  0.00%|         'strict' - raise a ValueError error (or a subclass)
   122|         0|            0|            0|  0.00%|         'ignore' - ignore the character and continue with the next
   123|         0|            0|            0|  0.00%|         'replace' - replace with a suitable replacement character;
   124|         0|            0|            0|  0.00%|                    Python will use the official U+FFFD REPLACEMENT
   125|         0|            0|            0|  0.00%|                    CHARACTER for the builtin Unicode codecs on
   126|         0|            0|            0|  0.00%|                    decoding and '?' on encoding.
   127|         0|            0|            0|  0.00%|         'surrogateescape' - replace with private code points U+DCnn.
   128|         0|            0|            0|  0.00%|         'xmlcharrefreplace' - Replace with the appropriate XML
   129|         0|            0|            0|  0.00%|                               character reference (only for encoding).
   130|         0|            0|            0|  0.00%|         'backslashreplace'  - Replace with backslashed escape sequences.
   131|         0|            0|            0|  0.00%|         'namereplace'       - Replace with \\N{...} escape sequences
   132|         0|            0|            0|  0.00%|                               (only for encoding).
   133|         0|            0|            0|  0.00%|
   134|         0|            0|            0|  0.00%|        The set of allowed values can be extended via register_error.
   135|         0|            0|            0|  0.00%|
   136|         0|            0|            0|  0.00%|    """
   137|         0|            0|            0|  0.00%|    def encode(self, input, errors='strict'):
   138|         0|            0|            0|  0.00%|
   139|         0|            0|            0|  0.00%|        """ Encodes the object input and returns a tuple (output
   140|         0|            0|            0|  0.00%|            object, length consumed).
   141|         0|            0|            0|  0.00%|
   142|         0|            0|            0|  0.00%|            errors defines the error handling to apply. It defaults to
   143|         0|            0|            0|  0.00%|            'strict' handling.
   144|         0|            0|            0|  0.00%|
   145|         0|            0|            0|  0.00%|            The method may not store state in the Codec instance. Use
   146|         0|            0|            0|  0.00%|            StreamWriter for codecs which have to keep state in order to
   147|         0|            0|            0|  0.00%|            make encoding efficient.
   148|         0|            0|            0|  0.00%|
   149|         0|            0|            0|  0.00%|            The encoder must be able to handle zero length input and
   150|         0|            0|            0|  0.00%|            return an empty object of the output object type in this
   151|         0|            0|            0|  0.00%|            situation.
   152|         0|            0|            0|  0.00%|
   153|         0|            0|            0|  0.00%|        """
   154|         0|            0|            0|  0.00%|        raise NotImplementedError
   155|         0|            0|            0|  0.00%|
   156|         0|            0|            0|  0.00%|    def decode(self, input, errors='strict'):
   157|         0|            0|            0|  0.00%|
   158|         0|            0|            0|  0.00%|        """ Decodes the object input and returns a tuple (output
   159|         0|            0|            0|  0.00%|            object, length consumed).
   160|         0|            0|            0|  0.00%|
   161|         0|            0|            0|  0.00%|            input must be an object which provides the bf_getreadbuf
   162|         0|            0|            0|  0.00%|            buffer slot. Python strings, buffer objects and memory
   163|         0|            0|            0|  0.00%|            mapped files are examples of objects providing this slot.
   164|         0|            0|            0|  0.00%|
   165|         0|            0|            0|  0.00%|            errors defines the error handling to apply. It defaults to
   166|         0|            0|            0|  0.00%|            'strict' handling.
   167|         0|            0|            0|  0.00%|
   168|         0|            0|            0|  0.00%|            The method may not store state in the Codec instance. Use
   169|         0|            0|            0|  0.00%|            StreamReader for codecs which have to keep state in order to
   170|         0|            0|            0|  0.00%|            make decoding efficient.
   171|         0|            0|            0|  0.00%|
   172|         0|            0|            0|  0.00%|            The decoder must be able to handle zero length input and
   173|         0|            0|            0|  0.00%|            return an empty object of the output object type in this
   174|         0|            0|            0|  0.00%|            situation.
   175|         0|            0|            0|  0.00%|
   176|         0|            0|            0|  0.00%|        """
   177|         0|            0|            0|  0.00%|        raise NotImplementedError
   178|         0|            0|            0|  0.00%|
   179|         0|            0|            0|  0.00%|class IncrementalEncoder(object):
   180|         0|            0|            0|  0.00%|    """
   181|         0|            0|            0|  0.00%|    An IncrementalEncoder encodes an input in multiple steps. The input can
   182|         0|            0|            0|  0.00%|    be passed piece by piece to the encode() method. The IncrementalEncoder
   183|         0|            0|            0|  0.00%|    remembers the state of the encoding process between calls to encode().
   184|         0|            0|            0|  0.00%|    """
   185|         0|            0|            0|  0.00%|    def __init__(self, errors='strict'):
   186|         0|            0|            0|  0.00%|        """
   187|         0|            0|            0|  0.00%|        Creates an IncrementalEncoder instance.
   188|         0|            0|            0|  0.00%|
   189|         0|            0|            0|  0.00%|        The IncrementalEncoder may use different error handling schemes by
   190|         0|            0|            0|  0.00%|        providing the errors keyword argument. See the module docstring
   191|         0|            0|            0|  0.00%|        for a list of possible values.
   192|         0|            0|            0|  0.00%|        """
   193|         0|            0|            0|  0.00%|        self.errors = errors
   194|         0|            0|            0|  0.00%|        self.buffer = ""
   195|         0|            0|            0|  0.00%|
   196|         0|            0|            0|  0.00%|    def encode(self, input, final=False):
   197|         0|            0|            0|  0.00%|        """
   198|         0|            0|            0|  0.00%|        Encodes input and returns the resulting object.
   199|         0|            0|            0|  0.00%|        """
   200|         0|            0|            0|  0.00%|        raise NotImplementedError
   201|         0|            0|            0|  0.00%|
   202|         0|            0|            0|  0.00%|    def reset(self):
   203|         0|            0|            0|  0.00%|        """
   204|         0|            0|            0|  0.00%|        Resets the encoder to the initial state.
   205|         0|            0|            0|  0.00%|        """
   206|         0|            0|            0|  0.00%|
   207|         0|            0|            0|  0.00%|    def getstate(self):
   208|         0|            0|            0|  0.00%|        """
   209|         0|            0|            0|  0.00%|        Return the current state of the encoder.
   210|         0|            0|            0|  0.00%|        """
   211|         0|            0|            0|  0.00%|        return 0
   212|         0|            0|            0|  0.00%|
   213|         0|            0|            0|  0.00%|    def setstate(self, state):
   214|         0|            0|            0|  0.00%|        """
   215|         0|            0|            0|  0.00%|        Set the current state of the encoder. state must have been
   216|         0|            0|            0|  0.00%|        returned by getstate().
   217|         0|            0|            0|  0.00%|        """
   218|         0|            0|            0|  0.00%|
   219|         0|            0|            0|  0.00%|class BufferedIncrementalEncoder(IncrementalEncoder):
   220|         0|            0|            0|  0.00%|    """
   221|         0|            0|            0|  0.00%|    This subclass of IncrementalEncoder can be used as the baseclass for an
   222|         0|            0|            0|  0.00%|    incremental encoder if the encoder must keep some of the output in a
   223|         0|            0|            0|  0.00%|    buffer between calls to encode().
   224|         0|            0|            0|  0.00%|    """
   225|         0|            0|            0|  0.00%|    def __init__(self, errors='strict'):
   226|         0|            0|            0|  0.00%|        IncrementalEncoder.__init__(self, errors)
   227|         0|            0|            0|  0.00%|        # unencoded input that is kept between calls to encode()
   228|         0|            0|            0|  0.00%|        self.buffer = ""
   229|         0|            0|            0|  0.00%|
   230|         0|            0|            0|  0.00%|    def _buffer_encode(self, input, errors, final):
   231|         0|            0|            0|  0.00%|        # Overwrite this method in subclasses: It must encode input
   232|         0|            0|            0|  0.00%|        # and return an (output, length consumed) tuple
   233|         0|            0|            0|  0.00%|        raise NotImplementedError
   234|         0|            0|            0|  0.00%|
   235|         0|            0|            0|  0.00%|    def encode(self, input, final=False):
   236|         0|            0|            0|  0.00%|        # encode input (taking the buffer into account)
   237|         0|            0|            0|  0.00%|        data = self.buffer + input
   238|         0|            0|            0|  0.00%|        (result, consumed) = self._buffer_encode(data, self.errors, final)
   239|         0|            0|            0|  0.00%|        # keep unencoded input until the next call
   240|         0|            0|            0|  0.00%|        self.buffer = data[consumed:]
   241|         0|            0|            0|  0.00%|        return result
   242|         0|            0|            0|  0.00%|
   243|         0|            0|            0|  0.00%|    def reset(self):
   244|         0|            0|            0|  0.00%|        IncrementalEncoder.reset(self)
   245|         0|            0|            0|  0.00%|        self.buffer = ""
   246|         0|            0|            0|  0.00%|
   247|         0|            0|            0|  0.00%|    def getstate(self):
   248|         0|            0|            0|  0.00%|        return self.buffer or 0
   249|         0|            0|            0|  0.00%|
   250|         0|            0|            0|  0.00%|    def setstate(self, state):
   251|         0|            0|            0|  0.00%|        self.buffer = state or ""
   252|         0|            0|            0|  0.00%|
   253|         0|            0|            0|  0.00%|class IncrementalDecoder(object):
   254|         0|            0|            0|  0.00%|    """
   255|         0|            0|            0|  0.00%|    An IncrementalDecoder decodes an input in multiple steps. The input can
   256|         0|            0|            0|  0.00%|    be passed piece by piece to the decode() method. The IncrementalDecoder
   257|         0|            0|            0|  0.00%|    remembers the state of the decoding process between calls to decode().
   258|         0|            0|            0|  0.00%|    """
   259|         1|            0|            0|  0.00%|    def __init__(self, errors='strict'):
   260|         0|            0|            0|  0.00%|        """
   261|         0|            0|            0|  0.00%|        Create an IncrementalDecoder instance.
   262|         0|            0|            0|  0.00%|
   263|         0|            0|            0|  0.00%|        The IncrementalDecoder may use different error handling schemes by
   264|         0|            0|            0|  0.00%|        providing the errors keyword argument. See the module docstring
   265|         0|            0|            0|  0.00%|        for a list of possible values.
   266|         0|            0|            0|  0.00%|        """
   267|         1|            0|            0|  0.00%|        self.errors = errors
   268|         0|            0|            0|  0.00%|
   269|         0|            0|            0|  0.00%|    def decode(self, input, final=False):
   270|         0|            0|            0|  0.00%|        """
   271|         0|            0|            0|  0.00%|        Decode input and returns the resulting object.
   272|         0|            0|            0|  0.00%|        """
   273|         0|            0|            0|  0.00%|        raise NotImplementedError
   274|         0|            0|            0|  0.00%|
   275|         0|            0|            0|  0.00%|    def reset(self):
   276|         0|            0|            0|  0.00%|        """
   277|         0|            0|            0|  0.00%|        Reset the decoder to the initial state.
   278|         0|            0|            0|  0.00%|        """
   279|         0|            0|            0|  0.00%|
   280|         6|            0|            0|  0.00%|    def getstate(self):
   281|         0|            0|            0|  0.00%|        """
   282|         0|            0|            0|  0.00%|        Return the current state of the decoder.
   283|         0|            0|            0|  0.00%|
   284|         0|            0|            0|  0.00%|        This must be a (buffered_input, additional_state_info) tuple.
   285|         0|            0|            0|  0.00%|        buffered_input must be a bytes object containing bytes that
   286|         0|            0|            0|  0.00%|        were passed to decode() that have not yet been converted.
   287|         0|            0|            0|  0.00%|        additional_state_info must be a non-negative integer
   288|         0|            0|            0|  0.00%|        representing the state of the decoder WITHOUT yet having
   289|         0|            0|            0|  0.00%|        processed the contents of buffered_input.  In the initial state
   290|         0|            0|            0|  0.00%|        and after reset(), getstate() must return (b"", 0).
   291|         0|            0|            0|  0.00%|        """
   292|         6|            0|            0|  0.00%|        return (b"", 0)
   293|         0|            0|            0|  0.00%|
   294|         0|            0|            0|  0.00%|    def setstate(self, state):
   295|         0|            0|            0|  0.00%|        """
   296|         0|            0|            0|  0.00%|        Set the current state of the decoder.
   297|         0|            0|            0|  0.00%|
   298|         0|            0|            0|  0.00%|        state must have been returned by getstate().  The effect of
   299|         0|            0|            0|  0.00%|        setstate((b"", 0)) must be equivalent to reset().
   300|         0|            0|            0|  0.00%|        """
   301|         0|            0|            0|  0.00%|
   302|         0|            0|            0|  0.00%|class BufferedIncrementalDecoder(IncrementalDecoder):
   303|         0|            0|            0|  0.00%|    """
   304|         0|            0|            0|  0.00%|    This subclass of IncrementalDecoder can be used as the baseclass for an
   305|         0|            0|            0|  0.00%|    incremental decoder if the decoder must be able to handle incomplete
   306|         0|            0|            0|  0.00%|    byte sequences.
   307|         0|            0|            0|  0.00%|    """
   308|         0|            0|            0|  0.00%|    def __init__(self, errors='strict'):
   309|         0|            0|            0|  0.00%|        IncrementalDecoder.__init__(self, errors)
   310|         0|            0|            0|  0.00%|        # undecoded input that is kept between calls to decode()
   311|         0|            0|            0|  0.00%|        self.buffer = b""
   312|         0|            0|            0|  0.00%|
   313|         0|            0|            0|  0.00%|    def _buffer_decode(self, input, errors, final):
   314|         0|            0|            0|  0.00%|        # Overwrite this method in subclasses: It must decode input
   315|         0|            0|            0|  0.00%|        # and return an (output, length consumed) tuple
   316|         0|            0|            0|  0.00%|        raise NotImplementedError
   317|         0|            0|            0|  0.00%|
   318|         0|            0|            0|  0.00%|    def decode(self, input, final=False):
   319|         0|            0|            0|  0.00%|        # decode input (taking the buffer into account)
   320|         0|            0|            0|  0.00%|        data = self.buffer + input
   321|         0|            0|            0|  0.00%|        (result, consumed) = self._buffer_decode(data, self.errors, final)
   322|         0|            0|            0|  0.00%|        # keep undecoded input until the next call
   323|         0|            0|            0|  0.00%|        self.buffer = data[consumed:]
   324|         0|            0|            0|  0.00%|        return result
   325|         0|            0|            0|  0.00%|
   326|         0|            0|            0|  0.00%|    def reset(self):
   327|         0|            0|            0|  0.00%|        IncrementalDecoder.reset(self)
   328|         0|            0|            0|  0.00%|        self.buffer = b""
   329|         0|            0|            0|  0.00%|
   330|         0|            0|            0|  0.00%|    def getstate(self):
   331|         0|            0|            0|  0.00%|        # additional state info is always 0
   332|         0|            0|            0|  0.00%|        return (self.buffer, 0)
   333|         0|            0|            0|  0.00%|
   334|         0|            0|            0|  0.00%|    def setstate(self, state):
   335|         0|            0|            0|  0.00%|        # ignore additional state info
   336|         0|            0|            0|  0.00%|        self.buffer = state[0]
   337|         0|            0|            0|  0.00%|
   338|         0|            0|            0|  0.00%|#
   339|         0|            0|            0|  0.00%|# The StreamWriter and StreamReader class provide generic working
   340|         0|            0|            0|  0.00%|# interfaces which can be used to implement new encoding submodules
   341|         0|            0|            0|  0.00%|# very easily. See encodings/utf_8.py for an example on how this is
   342|         0|            0|            0|  0.00%|# done.
   343|         0|            0|            0|  0.00%|#
   344|         0|            0|            0|  0.00%|
   345|         0|            0|            0|  0.00%|class StreamWriter(Codec):
   346|         0|            0|            0|  0.00%|
   347|         0|            0|            0|  0.00%|    def __init__(self, stream, errors='strict'):
   348|         0|            0|            0|  0.00%|
   349|         0|            0|            0|  0.00%|        """ Creates a StreamWriter instance.
   350|         0|            0|            0|  0.00%|
   351|         0|            0|            0|  0.00%|            stream must be a file-like object open for writing.
   352|         0|            0|            0|  0.00%|
   353|         0|            0|            0|  0.00%|            The StreamWriter may use different error handling
   354|         0|            0|            0|  0.00%|            schemes by providing the errors keyword argument. These
   355|         0|            0|            0|  0.00%|            parameters are predefined:
   356|         0|            0|            0|  0.00%|
   357|         0|            0|            0|  0.00%|             'strict' - raise a ValueError (or a subclass)
   358|         0|            0|            0|  0.00%|             'ignore' - ignore the character and continue with the next
   359|         0|            0|            0|  0.00%|             'replace'- replace with a suitable replacement character
   360|         0|            0|            0|  0.00%|             'xmlcharrefreplace' - Replace with the appropriate XML
   361|         0|            0|            0|  0.00%|                                   character reference.
   362|         0|            0|            0|  0.00%|             'backslashreplace'  - Replace with backslashed escape
   363|         0|            0|            0|  0.00%|                                   sequences.
   364|         0|            0|            0|  0.00%|             'namereplace'       - Replace with \\N{...} escape sequences.
   365|         0|            0|            0|  0.00%|
   366|         0|            0|            0|  0.00%|            The set of allowed parameter values can be extended via
   367|         0|            0|            0|  0.00%|            register_error.
   368|         0|            0|            0|  0.00%|        """
   369|         0|            0|            0|  0.00%|        self.stream = stream
   370|         0|            0|            0|  0.00%|        self.errors = errors
   371|         0|            0|            0|  0.00%|
   372|         0|            0|            0|  0.00%|    def write(self, object):
   373|         0|            0|            0|  0.00%|
   374|         0|            0|            0|  0.00%|        """ Writes the object's contents encoded to self.stream.
   375|         0|            0|            0|  0.00%|        """
   376|         0|            0|            0|  0.00%|        data, consumed = self.encode(object, self.errors)
   377|         0|            0|            0|  0.00%|        self.stream.write(data)
   378|         0|            0|            0|  0.00%|
   379|         0|            0|            0|  0.00%|    def writelines(self, list):
   380|         0|            0|            0|  0.00%|
   381|         0|            0|            0|  0.00%|        """ Writes the concatenated list of strings to the stream
   382|         0|            0|            0|  0.00%|            using .write().
   383|         0|            0|            0|  0.00%|        """
   384|         0|            0|            0|  0.00%|        self.write(''.join(list))
   385|         0|            0|            0|  0.00%|
   386|         0|            0|            0|  0.00%|    def reset(self):
   387|         0|            0|            0|  0.00%|
   388|         0|            0|            0|  0.00%|        """ Flushes and resets the codec buffers used for keeping state.
   389|         0|            0|            0|  0.00%|
   390|         0|            0|            0|  0.00%|            Calling this method should ensure that the data on the
   391|         0|            0|            0|  0.00%|            output is put into a clean state, that allows appending
   392|         0|            0|            0|  0.00%|            of new fresh data without having to rescan the whole
   393|         0|            0|            0|  0.00%|            stream to recover state.
   394|         0|            0|            0|  0.00%|
   395|         0|            0|            0|  0.00%|        """
   396|         0|            0|            0|  0.00%|        pass
   397|         0|            0|            0|  0.00%|
   398|         0|            0|            0|  0.00%|    def seek(self, offset, whence=0):
   399|         0|            0|            0|  0.00%|        self.stream.seek(offset, whence)
   400|         0|            0|            0|  0.00%|        if whence == 0 and offset == 0:
   401|         0|            0|            0|  0.00%|            self.reset()
   402|         0|            0|            0|  0.00%|
   403|         0|            0|            0|  0.00%|    def __getattr__(self, name,
   404|         0|            0|            0|  0.00%|                    getattr=getattr):
   405|         0|            0|            0|  0.00%|
   406|         0|            0|            0|  0.00%|        """ Inherit all other methods from the underlying stream.
   407|         0|            0|            0|  0.00%|        """
   408|         0|            0|            0|  0.00%|        return getattr(self.stream, name)
   409|         0|            0|            0|  0.00%|
   410|         0|            0|            0|  0.00%|    def __enter__(self):
   411|         0|            0|            0|  0.00%|        return self
   412|         0|            0|            0|  0.00%|
   413|         0|            0|            0|  0.00%|    def __exit__(self, type, value, tb):
   414|         0|            0|            0|  0.00%|        self.stream.close()
   415|         0|            0|            0|  0.00%|
   416|         0|            0|            0|  0.00%|###
   417|         0|            0|            0|  0.00%|
   418|         0|            0|            0|  0.00%|class StreamReader(Codec):
   419|         0|            0|            0|  0.00%|
   420|         0|            0|            0|  0.00%|    charbuffertype = str
   421|         0|            0|            0|  0.00%|
   422|         0|            0|            0|  0.00%|    def __init__(self, stream, errors='strict'):
   423|         0|            0|            0|  0.00%|
   424|         0|            0|            0|  0.00%|        """ Creates a StreamReader instance.
   425|         0|            0|            0|  0.00%|
   426|         0|            0|            0|  0.00%|            stream must be a file-like object open for reading.
   427|         0|            0|            0|  0.00%|
   428|         0|            0|            0|  0.00%|            The StreamReader may use different error handling
   429|         0|            0|            0|  0.00%|            schemes by providing the errors keyword argument. These
   430|         0|            0|            0|  0.00%|            parameters are predefined:
   431|         0|            0|            0|  0.00%|
   432|         0|            0|            0|  0.00%|             'strict' - raise a ValueError (or a subclass)
   433|         0|            0|            0|  0.00%|             'ignore' - ignore the character and continue with the next
   434|         0|            0|            0|  0.00%|             'replace'- replace with a suitable replacement character
   435|         0|            0|            0|  0.00%|             'backslashreplace' - Replace with backslashed escape sequences;
   436|         0|            0|            0|  0.00%|
   437|         0|            0|            0|  0.00%|            The set of allowed parameter values can be extended via
   438|         0|            0|            0|  0.00%|            register_error.
   439|         0|            0|            0|  0.00%|        """
   440|         0|            0|            0|  0.00%|        self.stream = stream
   441|         0|            0|            0|  0.00%|        self.errors = errors
   442|         0|            0|            0|  0.00%|        self.bytebuffer = b""
   443|         0|            0|            0|  0.00%|        self._empty_charbuffer = self.charbuffertype()
   444|         0|            0|            0|  0.00%|        self.charbuffer = self._empty_charbuffer
   445|         0|            0|            0|  0.00%|        self.linebuffer = None
   446|         0|            0|            0|  0.00%|
   447|         0|            0|            0|  0.00%|    def decode(self, input, errors='strict'):
   448|         0|            0|            0|  0.00%|        raise NotImplementedError
   449|         0|            0|            0|  0.00%|
   450|         0|            0|            0|  0.00%|    def read(self, size=-1, chars=-1, firstline=False):
   451|         0|            0|            0|  0.00%|
   452|         0|            0|            0|  0.00%|        """ Decodes data from the stream self.stream and returns the
   453|         0|            0|            0|  0.00%|            resulting object.
   454|         0|            0|            0|  0.00%|
   455|         0|            0|            0|  0.00%|            chars indicates the number of decoded code points or bytes to
   456|         0|            0|            0|  0.00%|            return. read() will never return more data than requested,
   457|         0|            0|            0|  0.00%|            but it might return less, if there is not enough available.
   458|         0|            0|            0|  0.00%|
   459|         0|            0|            0|  0.00%|            size indicates the approximate maximum number of decoded
   460|         0|            0|            0|  0.00%|            bytes or code points to read for decoding. The decoder
   461|         0|            0|            0|  0.00%|            can modify this setting as appropriate. The default value
   462|         0|            0|            0|  0.00%|            -1 indicates to read and decode as much as possible.  size
   463|         0|            0|            0|  0.00%|            is intended to prevent having to decode huge files in one
   464|         0|            0|            0|  0.00%|            step.
   465|         0|            0|            0|  0.00%|
   466|         0|            0|            0|  0.00%|            If firstline is true, and a UnicodeDecodeError happens
   467|         0|            0|            0|  0.00%|            after the first line terminator in the input only the first line
   468|         0|            0|            0|  0.00%|            will be returned, the rest of the input will be kept until the
   469|         0|            0|            0|  0.00%|            next call to read().
   470|         0|            0|            0|  0.00%|
   471|         0|            0|            0|  0.00%|            The method should use a greedy read strategy, meaning that
   472|         0|            0|            0|  0.00%|            it should read as much data as is allowed within the
   473|         0|            0|            0|  0.00%|            definition of the encoding and the given size, e.g.  if
   474|         0|            0|            0|  0.00%|            optional encoding endings or state markers are available
   475|         0|            0|            0|  0.00%|            on the stream, these should be read too.
   476|         0|            0|            0|  0.00%|        """
   477|         0|            0|            0|  0.00%|        # If we have lines cached, first merge them back into characters
   478|         0|            0|            0|  0.00%|        if self.linebuffer:
   479|         0|            0|            0|  0.00%|            self.charbuffer = self._empty_charbuffer.join(self.linebuffer)
   480|         0|            0|            0|  0.00%|            self.linebuffer = None
   481|         0|            0|            0|  0.00%|
   482|         0|            0|            0|  0.00%|        # read until we get the required number of characters (if available)
   483|         0|            0|            0|  0.00%|        while True:
   484|         0|            0|            0|  0.00%|            # can the request be satisfied from the character buffer?
   485|         0|            0|            0|  0.00%|            if chars >= 0:
   486|         0|            0|            0|  0.00%|                if len(self.charbuffer) >= chars:
   487|         0|            0|            0|  0.00%|                    break
   488|         0|            0|            0|  0.00%|            elif size >= 0:
   489|         0|            0|            0|  0.00%|                if len(self.charbuffer) >= size:
   490|         0|            0|            0|  0.00%|                    break
   491|         0|            0|            0|  0.00%|            # we need more data
   492|         0|            0|            0|  0.00%|            if size < 0:
   493|         0|            0|            0|  0.00%|                newdata = self.stream.read()
   494|         0|            0|            0|  0.00%|            else:
   495|         0|            0|            0|  0.00%|                newdata = self.stream.read(size)
   496|         0|            0|            0|  0.00%|            # decode bytes (those remaining from the last call included)
   497|         0|            0|            0|  0.00%|            data = self.bytebuffer + newdata
   498|         0|            0|            0|  0.00%|            if not data:
   499|         0|            0|            0|  0.00%|                break
   500|         0|            0|            0|  0.00%|            try:
   501|         0|            0|            0|  0.00%|                newchars, decodedbytes = self.decode(data, self.errors)
   502|         0|            0|            0|  0.00%|            except UnicodeDecodeError as exc:
   503|         0|            0|            0|  0.00%|                if firstline:
   504|         0|            0|            0|  0.00%|                    newchars, decodedbytes = \
   505|         0|            0|            0|  0.00%|                        self.decode(data[:exc.start], self.errors)
   506|         0|            0|            0|  0.00%|                    lines = newchars.splitlines(keepends=True)
   507|         0|            0|            0|  0.00%|                    if len(lines)<=1:
   508|         0|            0|            0|  0.00%|                        raise
   509|         0|            0|            0|  0.00%|                else:
   510|         0|            0|            0|  0.00%|                    raise
   511|         0|            0|            0|  0.00%|            # keep undecoded bytes until the next call
   512|         0|            0|            0|  0.00%|            self.bytebuffer = data[decodedbytes:]
   513|         0|            0|            0|  0.00%|            # put new characters in the character buffer
   514|         0|            0|            0|  0.00%|            self.charbuffer += newchars
   515|         0|            0|            0|  0.00%|            # there was no data available
   516|         0|            0|            0|  0.00%|            if not newdata:
   517|         0|            0|            0|  0.00%|                break
   518|         0|            0|            0|  0.00%|        if chars < 0:
   519|         0|            0|            0|  0.00%|            # Return everything we've got
   520|         0|            0|            0|  0.00%|            result = self.charbuffer
   521|         0|            0|            0|  0.00%|            self.charbuffer = self._empty_charbuffer
   522|         0|            0|            0|  0.00%|        else:
   523|         0|            0|            0|  0.00%|            # Return the first chars characters
   524|         0|            0|            0|  0.00%|            result = self.charbuffer[:chars]
   525|         0|            0|            0|  0.00%|            self.charbuffer = self.charbuffer[chars:]
   526|         0|            0|            0|  0.00%|        return result
   527|         0|            0|            0|  0.00%|
   528|         0|            0|            0|  0.00%|    def readline(self, size=None, keepends=True):
   529|         0|            0|            0|  0.00%|
   530|         0|            0|            0|  0.00%|        """ Read one line from the input stream and return the
   531|         0|            0|            0|  0.00%|            decoded data.
   532|         0|            0|            0|  0.00%|
   533|         0|            0|            0|  0.00%|            size, if given, is passed as size argument to the
   534|         0|            0|            0|  0.00%|            read() method.
   535|         0|            0|            0|  0.00%|
   536|         0|            0|            0|  0.00%|        """
   537|         0|            0|            0|  0.00%|        # If we have lines cached from an earlier read, return
   538|         0|            0|            0|  0.00%|        # them unconditionally
   539|         0|            0|            0|  0.00%|        if self.linebuffer:
   540|         0|            0|            0|  0.00%|            line = self.linebuffer[0]
   541|         0|            0|            0|  0.00%|            del self.linebuffer[0]
   542|         0|            0|            0|  0.00%|            if len(self.linebuffer) == 1:
   543|         0|            0|            0|  0.00%|                # revert to charbuffer mode; we might need more data
   544|         0|            0|            0|  0.00%|                # next time
   545|         0|            0|            0|  0.00%|                self.charbuffer = self.linebuffer[0]
   546|         0|            0|            0|  0.00%|                self.linebuffer = None
   547|         0|            0|            0|  0.00%|            if not keepends:
   548|         0|            0|            0|  0.00%|                line = line.splitlines(keepends=False)[0]
   549|         0|            0|            0|  0.00%|            return line
   550|         0|            0|            0|  0.00%|
   551|         0|            0|            0|  0.00%|        readsize = size or 72
   552|         0|            0|            0|  0.00%|        line = self._empty_charbuffer
   553|         0|            0|            0|  0.00%|        # If size is given, we call read() only once
   554|         0|            0|            0|  0.00%|        while True:
   555|         0|            0|            0|  0.00%|            data = self.read(readsize, firstline=True)
   556|         0|            0|            0|  0.00%|            if data:
   557|         0|            0|            0|  0.00%|                # If we're at a "\r" read one extra character (which might
   558|         0|            0|            0|  0.00%|                # be a "\n") to get a proper line ending. If the stream is
   559|         0|            0|            0|  0.00%|                # temporarily exhausted we return the wrong line ending.
   560|         0|            0|            0|  0.00%|                if (isinstance(data, str) and data.endswith("\r")) or \
   561|         0|            0|            0|  0.00%|                   (isinstance(data, bytes) and data.endswith(b"\r")):
   562|         0|            0|            0|  0.00%|                    data += self.read(size=1, chars=1)
   563|         0|            0|            0|  0.00%|
   564|         0|            0|            0|  0.00%|            line += data
   565|         0|            0|            0|  0.00%|            lines = line.splitlines(keepends=True)
   566|         0|            0|            0|  0.00%|            if lines:
   567|         0|            0|            0|  0.00%|                if len(lines) > 1:
   568|         0|            0|            0|  0.00%|                    # More than one line result; the first line is a full line
   569|         0|            0|            0|  0.00%|                    # to return
   570|         0|            0|            0|  0.00%|                    line = lines[0]
   571|         0|            0|            0|  0.00%|                    del lines[0]
   572|         0|            0|            0|  0.00%|                    if len(lines) > 1:
   573|         0|            0|            0|  0.00%|                        # cache the remaining lines
   574|         0|            0|            0|  0.00%|                        lines[-1] += self.charbuffer
   575|         0|            0|            0|  0.00%|                        self.linebuffer = lines
   576|         0|            0|            0|  0.00%|                        self.charbuffer = None
   577|         0|            0|            0|  0.00%|                    else:
   578|         0|            0|            0|  0.00%|                        # only one remaining line, put it back into charbuffer
   579|         0|            0|            0|  0.00%|                        self.charbuffer = lines[0] + self.charbuffer
   580|         0|            0|            0|  0.00%|                    if not keepends:
   581|         0|            0|            0|  0.00%|                        line = line.splitlines(keepends=False)[0]
   582|         0|            0|            0|  0.00%|                    break
   583|         0|            0|            0|  0.00%|                line0withend = lines[0]
   584|         0|            0|            0|  0.00%|                line0withoutend = lines[0].splitlines(keepends=False)[0]
   585|         0|            0|            0|  0.00%|                if line0withend != line0withoutend: # We really have a line end
   586|         0|            0|            0|  0.00%|                    # Put the rest back together and keep it until the next call
   587|         0|            0|            0|  0.00%|                    self.charbuffer = self._empty_charbuffer.join(lines[1:]) + \
   588|         0|            0|            0|  0.00%|                                      self.charbuffer
   589|         0|            0|            0|  0.00%|                    if keepends:
   590|         0|            0|            0|  0.00%|                        line = line0withend
   591|         0|            0|            0|  0.00%|                    else:
   592|         0|            0|            0|  0.00%|                        line = line0withoutend
   593|         0|            0|            0|  0.00%|                    break
   594|         0|            0|            0|  0.00%|            # we didn't get anything or this was our only try
   595|         0|            0|            0|  0.00%|            if not data or size is not None:
   596|         0|            0|            0|  0.00%|                if line and not keepends:
   597|         0|            0|            0|  0.00%|                    line = line.splitlines(keepends=False)[0]
   598|         0|            0|            0|  0.00%|                break
   599|         0|            0|            0|  0.00%|            if readsize < 8000:
   600|         0|            0|            0|  0.00%|                readsize *= 2
   601|         0|            0|            0|  0.00%|        return line
   602|         0|            0|            0|  0.00%|
   603|         0|            0|            0|  0.00%|    def readlines(self, sizehint=None, keepends=True):
   604|         0|            0|            0|  0.00%|
   605|         0|            0|            0|  0.00%|        """ Read all lines available on the input stream
   606|         0|            0|            0|  0.00%|            and return them as a list.
   607|         0|            0|            0|  0.00%|
   608|         0|            0|            0|  0.00%|            Line breaks are implemented using the codec's decoder
   609|         0|            0|            0|  0.00%|            method and are included in the list entries.
   610|         0|            0|            0|  0.00%|
   611|         0|            0|            0|  0.00%|            sizehint, if given, is ignored since there is no efficient
   612|         0|            0|            0|  0.00%|            way to finding the true end-of-line.
   613|         0|            0|            0|  0.00%|
   614|         0|            0|            0|  0.00%|        """
   615|         0|            0|            0|  0.00%|        data = self.read()
   616|         0|            0|            0|  0.00%|        return data.splitlines(keepends)
   617|         0|            0|            0|  0.00%|
   618|         0|            0|            0|  0.00%|    def reset(self):
   619|         0|            0|            0|  0.00%|
   620|         0|            0|            0|  0.00%|        """ Resets the codec buffers used for keeping state.
   621|         0|            0|            0|  0.00%|
   622|         0|            0|            0|  0.00%|            Note that no stream repositioning should take place.
   623|         0|            0|            0|  0.00%|            This method is primarily intended to be able to recover
   624|         0|            0|            0|  0.00%|            from decoding errors.
   625|         0|            0|            0|  0.00%|
   626|         0|            0|            0|  0.00%|        """
   627|         0|            0|            0|  0.00%|        self.bytebuffer = b""
   628|         0|            0|            0|  0.00%|        self.charbuffer = self._empty_charbuffer
   629|         0|            0|            0|  0.00%|        self.linebuffer = None
   630|         0|            0|            0|  0.00%|
   631|         0|            0|            0|  0.00%|    def seek(self, offset, whence=0):
   632|         0|            0|            0|  0.00%|        """ Set the input stream's current position.
   633|         0|            0|            0|  0.00%|
   634|         0|            0|            0|  0.00%|            Resets the codec buffers used for keeping state.
   635|         0|            0|            0|  0.00%|        """
   636|         0|            0|            0|  0.00%|        self.stream.seek(offset, whence)
   637|         0|            0|            0|  0.00%|        self.reset()
   638|         0|            0|            0|  0.00%|
   639|         0|            0|            0|  0.00%|    def __next__(self):
   640|         0|            0|            0|  0.00%|
   641|         0|            0|            0|  0.00%|        """ Return the next decoded line from the input stream."""
   642|         0|            0|            0|  0.00%|        line = self.readline()
   643|         0|            0|            0|  0.00%|        if line:
   644|         0|            0|            0|  0.00%|            return line
   645|         0|            0|            0|  0.00%|        raise StopIteration
   646|         0|            0|            0|  0.00%|
   647|         0|            0|            0|  0.00%|    def __iter__(self):
   648|         0|            0|            0|  0.00%|        return self
   649|         0|            0|            0|  0.00%|
   650|         0|            0|            0|  0.00%|    def __getattr__(self, name,
   651|         0|            0|            0|  0.00%|                    getattr=getattr):
   652|         0|            0|            0|  0.00%|
   653|         0|            0|            0|  0.00%|        """ Inherit all other methods from the underlying stream.
   654|         0|            0|            0|  0.00%|        """
   655|         0|            0|            0|  0.00%|        return getattr(self.stream, name)
   656|         0|            0|            0|  0.00%|
   657|         0|            0|            0|  0.00%|    def __enter__(self):
   658|         0|            0|            0|  0.00%|        return self
   659|         0|            0|            0|  0.00%|
   660|         0|            0|            0|  0.00%|    def __exit__(self, type, value, tb):
   661|         0|            0|            0|  0.00%|        self.stream.close()
   662|         0|            0|            0|  0.00%|
   663|         0|            0|            0|  0.00%|###
   664|         0|            0|            0|  0.00%|
   665|         0|            0|            0|  0.00%|class StreamReaderWriter:
   666|         0|            0|            0|  0.00%|
   667|         0|            0|            0|  0.00%|    """ StreamReaderWriter instances allow wrapping streams which
   668|         0|            0|            0|  0.00%|        work in both read and write modes.
   669|         0|            0|            0|  0.00%|
   670|         0|            0|            0|  0.00%|        The design is such that one can use the factory functions
   671|         0|            0|            0|  0.00%|        returned by the codec.lookup() function to construct the
   672|         0|            0|            0|  0.00%|        instance.
   673|         0|            0|            0|  0.00%|
   674|         0|            0|            0|  0.00%|    """
   675|         0|            0|            0|  0.00%|    # Optional attributes set by the file wrappers below
   676|         0|            0|            0|  0.00%|    encoding = 'unknown'
   677|         0|            0|            0|  0.00%|
   678|         0|            0|            0|  0.00%|    def __init__(self, stream, Reader, Writer, errors='strict'):
   679|         0|            0|            0|  0.00%|
   680|         0|            0|            0|  0.00%|        """ Creates a StreamReaderWriter instance.
   681|         0|            0|            0|  0.00%|
   682|         0|            0|            0|  0.00%|            stream must be a Stream-like object.
   683|         0|            0|            0|  0.00%|
   684|         0|            0|            0|  0.00%|            Reader, Writer must be factory functions or classes
   685|         0|            0|            0|  0.00%|            providing the StreamReader, StreamWriter interface resp.
   686|         0|            0|            0|  0.00%|
   687|         0|            0|            0|  0.00%|            Error handling is done in the same way as defined for the
   688|         0|            0|            0|  0.00%|            StreamWriter/Readers.
   689|         0|            0|            0|  0.00%|
   690|         0|            0|            0|  0.00%|        """
   691|         0|            0|            0|  0.00%|        self.stream = stream
   692|         0|            0|            0|  0.00%|        self.reader = Reader(stream, errors)
   693|         0|            0|            0|  0.00%|        self.writer = Writer(stream, errors)
   694|         0|            0|            0|  0.00%|        self.errors = errors
   695|         0|            0|            0|  0.00%|
   696|         0|            0|            0|  0.00%|    def read(self, size=-1):
   697|         0|            0|            0|  0.00%|
   698|         0|            0|            0|  0.00%|        return self.reader.read(size)
   699|         0|            0|            0|  0.00%|
   700|         0|            0|            0|  0.00%|    def readline(self, size=None):
   701|         0|            0|            0|  0.00%|
   702|         0|            0|            0|  0.00%|        return self.reader.readline(size)
   703|         0|            0|            0|  0.00%|
   704|         0|            0|            0|  0.00%|    def readlines(self, sizehint=None):
   705|         0|            0|            0|  0.00%|
   706|         0|            0|            0|  0.00%|        return self.reader.readlines(sizehint)
   707|         0|            0|            0|  0.00%|
   708|         0|            0|            0|  0.00%|    def __next__(self):
   709|         0|            0|            0|  0.00%|
   710|         0|            0|            0|  0.00%|        """ Return the next decoded line from the input stream."""
   711|         0|            0|            0|  0.00%|        return next(self.reader)
   712|         0|            0|            0|  0.00%|
   713|         0|            0|            0|  0.00%|    def __iter__(self):
   714|         0|            0|            0|  0.00%|        return self
   715|         0|            0|            0|  0.00%|
   716|         0|            0|            0|  0.00%|    def write(self, data):
   717|         0|            0|            0|  0.00%|
   718|         0|            0|            0|  0.00%|        return self.writer.write(data)
   719|         0|            0|            0|  0.00%|
   720|         0|            0|            0|  0.00%|    def writelines(self, list):
   721|         0|            0|            0|  0.00%|
   722|         0|            0|            0|  0.00%|        return self.writer.writelines(list)
   723|         0|            0|            0|  0.00%|
   724|         0|            0|            0|  0.00%|    def reset(self):
   725|         0|            0|            0|  0.00%|
   726|         0|            0|            0|  0.00%|        self.reader.reset()
   727|         0|            0|            0|  0.00%|        self.writer.reset()
   728|         0|            0|            0|  0.00%|
   729|         0|            0|            0|  0.00%|    def seek(self, offset, whence=0):
   730|         0|            0|            0|  0.00%|        self.stream.seek(offset, whence)
   731|         0|            0|            0|  0.00%|        self.reader.reset()
   732|         0|            0|            0|  0.00%|        if whence == 0 and offset == 0:
   733|         0|            0|            0|  0.00%|            self.writer.reset()
   734|         0|            0|            0|  0.00%|
   735|         0|            0|            0|  0.00%|    def __getattr__(self, name,
   736|         0|            0|            0|  0.00%|                    getattr=getattr):
   737|         0|            0|            0|  0.00%|
   738|         0|            0|            0|  0.00%|        """ Inherit all other methods from the underlying stream.
   739|         0|            0|            0|  0.00%|        """
   740|         0|            0|            0|  0.00%|        return getattr(self.stream, name)
   741|         0|            0|            0|  0.00%|
   742|         0|            0|            0|  0.00%|    # these are needed to make "with codecs.open(...)" work properly
   743|         0|            0|            0|  0.00%|
   744|         0|            0|            0|  0.00%|    def __enter__(self):
   745|         0|            0|            0|  0.00%|        return self
   746|         0|            0|            0|  0.00%|
   747|         0|            0|            0|  0.00%|    def __exit__(self, type, value, tb):
   748|         0|            0|            0|  0.00%|        self.stream.close()
   749|         0|            0|            0|  0.00%|
   750|         0|            0|            0|  0.00%|###
   751|         0|            0|            0|  0.00%|
   752|         0|            0|            0|  0.00%|class StreamRecoder:
   753|         0|            0|            0|  0.00%|
   754|         0|            0|            0|  0.00%|    """ StreamRecoder instances translate data from one encoding to another.
   755|         0|            0|            0|  0.00%|
   756|         0|            0|            0|  0.00%|        They use the complete set of APIs returned by the
   757|         0|            0|            0|  0.00%|        codecs.lookup() function to implement their task.
   758|         0|            0|            0|  0.00%|
   759|         0|            0|            0|  0.00%|        Data written to the StreamRecoder is first decoded into an
   760|         0|            0|            0|  0.00%|        intermediate format (depending on the "decode" codec) and then
   761|         0|            0|            0|  0.00%|        written to the underlying stream using an instance of the provided
   762|         0|            0|            0|  0.00%|        Writer class.
   763|         0|            0|            0|  0.00%|
   764|         0|            0|            0|  0.00%|        In the other direction, data is read from the underlying stream using
   765|         0|            0|            0|  0.00%|        a Reader instance and then encoded and returned to the caller.
   766|         0|            0|            0|  0.00%|
   767|         0|            0|            0|  0.00%|    """
   768|         0|            0|            0|  0.00%|    # Optional attributes set by the file wrappers below
   769|         0|            0|            0|  0.00%|    data_encoding = 'unknown'
   770|         0|            0|            0|  0.00%|    file_encoding = 'unknown'
   771|         0|            0|            0|  0.00%|
   772|         0|            0|            0|  0.00%|    def __init__(self, stream, encode, decode, Reader, Writer,
   773|         0|            0|            0|  0.00%|                 errors='strict'):
   774|         0|            0|            0|  0.00%|
   775|         0|            0|            0|  0.00%|        """ Creates a StreamRecoder instance which implements a two-way
   776|         0|            0|            0|  0.00%|            conversion: encode and decode work on the frontend (the
   777|         0|            0|            0|  0.00%|            data visible to .read() and .write()) while Reader and Writer
   778|         0|            0|            0|  0.00%|            work on the backend (the data in stream).
   779|         0|            0|            0|  0.00%|
   780|         0|            0|            0|  0.00%|            You can use these objects to do transparent
   781|         0|            0|            0|  0.00%|            transcodings from e.g. latin-1 to utf-8 and back.
   782|         0|            0|            0|  0.00%|
   783|         0|            0|            0|  0.00%|            stream must be a file-like object.
   784|         0|            0|            0|  0.00%|
   785|         0|            0|            0|  0.00%|            encode and decode must adhere to the Codec interface; Reader and
   786|         0|            0|            0|  0.00%|            Writer must be factory functions or classes providing the
   787|         0|            0|            0|  0.00%|            StreamReader and StreamWriter interfaces resp.
   788|         0|            0|            0|  0.00%|
   789|         0|            0|            0|  0.00%|            Error handling is done in the same way as defined for the
   790|         0|            0|            0|  0.00%|            StreamWriter/Readers.
   791|         0|            0|            0|  0.00%|
   792|         0|            0|            0|  0.00%|        """
   793|         0|            0|            0|  0.00%|        self.stream = stream
   794|         0|            0|            0|  0.00%|        self.encode = encode
   795|         0|            0|            0|  0.00%|        self.decode = decode
   796|         0|            0|            0|  0.00%|        self.reader = Reader(stream, errors)
   797|         0|            0|            0|  0.00%|        self.writer = Writer(stream, errors)
   798|         0|            0|            0|  0.00%|        self.errors = errors
   799|         0|            0|            0|  0.00%|
   800|         0|            0|            0|  0.00%|    def read(self, size=-1):
   801|         0|            0|            0|  0.00%|
   802|         0|            0|            0|  0.00%|        data = self.reader.read(size)
   803|         0|            0|            0|  0.00%|        data, bytesencoded = self.encode(data, self.errors)
   804|         0|            0|            0|  0.00%|        return data
   805|         0|            0|            0|  0.00%|
   806|         0|            0|            0|  0.00%|    def readline(self, size=None):
   807|         0|            0|            0|  0.00%|
   808|         0|            0|            0|  0.00%|        if size is None:
   809|         0|            0|            0|  0.00%|            data = self.reader.readline()
   810|         0|            0|            0|  0.00%|        else:
   811|         0|            0|            0|  0.00%|            data = self.reader.readline(size)
   812|         0|            0|            0|  0.00%|        data, bytesencoded = self.encode(data, self.errors)
   813|         0|            0|            0|  0.00%|        return data
   814|         0|            0|            0|  0.00%|
   815|         0|            0|            0|  0.00%|    def readlines(self, sizehint=None):
   816|         0|            0|            0|  0.00%|
   817|         0|            0|            0|  0.00%|        data = self.reader.read()
   818|         0|            0|            0|  0.00%|        data, bytesencoded = self.encode(data, self.errors)
   819|         0|            0|            0|  0.00%|        return data.splitlines(keepends=True)
   820|         0|            0|            0|  0.00%|
   821|         0|            0|            0|  0.00%|    def __next__(self):
   822|         0|            0|            0|  0.00%|
   823|         0|            0|            0|  0.00%|        """ Return the next decoded line from the input stream."""
   824|         0|            0|            0|  0.00%|        data = next(self.reader)
   825|         0|            0|            0|  0.00%|        data, bytesencoded = self.encode(data, self.errors)
   826|         0|            0|            0|  0.00%|        return data
   827|         0|            0|            0|  0.00%|
   828|         0|            0|            0|  0.00%|    def __iter__(self):
   829|         0|            0|            0|  0.00%|        return self
   830|         0|            0|            0|  0.00%|
   831|         0|            0|            0|  0.00%|    def write(self, data):
   832|         0|            0|            0|  0.00%|
   833|         0|            0|            0|  0.00%|        data, bytesdecoded = self.decode(data, self.errors)
   834|         0|            0|            0|  0.00%|        return self.writer.write(data)
   835|         0|            0|            0|  0.00%|
   836|         0|            0|            0|  0.00%|    def writelines(self, list):
   837|         0|            0|            0|  0.00%|
   838|         0|            0|            0|  0.00%|        data = ''.join(list)
   839|         0|            0|            0|  0.00%|        data, bytesdecoded = self.decode(data, self.errors)
   840|         0|            0|            0|  0.00%|        return self.writer.write(data)
   841|         0|            0|            0|  0.00%|
   842|         0|            0|            0|  0.00%|    def reset(self):
   843|         0|            0|            0|  0.00%|
   844|         0|            0|            0|  0.00%|        self.reader.reset()
   845|         0|            0|            0|  0.00%|        self.writer.reset()
   846|         0|            0|            0|  0.00%|
   847|         0|            0|            0|  0.00%|    def __getattr__(self, name,
   848|         0|            0|            0|  0.00%|                    getattr=getattr):
   849|         0|            0|            0|  0.00%|
   850|         0|            0|            0|  0.00%|        """ Inherit all other methods from the underlying stream.
   851|         0|            0|            0|  0.00%|        """
   852|         0|            0|            0|  0.00%|        return getattr(self.stream, name)
   853|         0|            0|            0|  0.00%|
   854|         0|            0|            0|  0.00%|    def __enter__(self):
   855|         0|            0|            0|  0.00%|        return self
   856|         0|            0|            0|  0.00%|
   857|         0|            0|            0|  0.00%|    def __exit__(self, type, value, tb):
   858|         0|            0|            0|  0.00%|        self.stream.close()
   859|         0|            0|            0|  0.00%|
   860|         0|            0|            0|  0.00%|### Shortcuts
   861|         0|            0|            0|  0.00%|
   862|         0|            0|            0|  0.00%|def open(filename, mode='r', encoding=None, errors='strict', buffering=1):
   863|         0|            0|            0|  0.00%|
   864|         0|            0|            0|  0.00%|    """ Open an encoded file using the given mode and return
   865|         0|            0|            0|  0.00%|        a wrapped version providing transparent encoding/decoding.
   866|         0|            0|            0|  0.00%|
   867|         0|            0|            0|  0.00%|        Note: The wrapped version will only accept the object format
   868|         0|            0|            0|  0.00%|        defined by the codecs, i.e. Unicode objects for most builtin
   869|         0|            0|            0|  0.00%|        codecs. Output is also codec dependent and will usually be
   870|         0|            0|            0|  0.00%|        Unicode as well.
   871|         0|            0|            0|  0.00%|
   872|         0|            0|            0|  0.00%|        Underlying encoded files are always opened in binary mode.
   873|         0|            0|            0|  0.00%|        The default file mode is 'r', meaning to open the file in read mode.
   874|         0|            0|            0|  0.00%|
   875|         0|            0|            0|  0.00%|        encoding specifies the encoding which is to be used for the
   876|         0|            0|            0|  0.00%|        file.
   877|         0|            0|            0|  0.00%|
   878|         0|            0|            0|  0.00%|        errors may be given to define the error handling. It defaults
   879|         0|            0|            0|  0.00%|        to 'strict' which causes ValueErrors to be raised in case an
   880|         0|            0|            0|  0.00%|        encoding error occurs.
   881|         0|            0|            0|  0.00%|
   882|         0|            0|            0|  0.00%|        buffering has the same meaning as for the builtin open() API.
   883|         0|            0|            0|  0.00%|        It defaults to line buffered.
   884|         0|            0|            0|  0.00%|
   885|         0|            0|            0|  0.00%|        The returned wrapped file object provides an extra attribute
   886|         0|            0|            0|  0.00%|        .encoding which allows querying the used encoding. This
   887|         0|            0|            0|  0.00%|        attribute is only available if an encoding was specified as
   888|         0|            0|            0|  0.00%|        parameter.
   889|         0|            0|            0|  0.00%|
   890|         0|            0|            0|  0.00%|    """
   891|         0|            0|            0|  0.00%|    if encoding is not None and \
   892|         0|            0|            0|  0.00%|       'b' not in mode:
   893|         0|            0|            0|  0.00%|        # Force opening of the file in binary mode
   894|         0|            0|            0|  0.00%|        mode = mode + 'b'
   895|         0|            0|            0|  0.00%|    file = builtins.open(filename, mode, buffering)
   896|         0|            0|            0|  0.00%|    if encoding is None:
   897|         0|            0|            0|  0.00%|        return file
   898|         0|            0|            0|  0.00%|    info = lookup(encoding)
   899|         0|            0|            0|  0.00%|    srw = StreamReaderWriter(file, info.streamreader, info.streamwriter, errors)
   900|         0|            0|            0|  0.00%|    # Add attributes to simplify introspection
   901|         0|            0|            0|  0.00%|    srw.encoding = encoding
   902|         0|            0|            0|  0.00%|    return srw
   903|         0|            0|            0|  0.00%|
   904|         0|            0|            0|  0.00%|def EncodedFile(file, data_encoding, file_encoding=None, errors='strict'):
   905|         0|            0|            0|  0.00%|
   906|         0|            0|            0|  0.00%|    """ Return a wrapped version of file which provides transparent
   907|         0|            0|            0|  0.00%|        encoding translation.
   908|         0|            0|            0|  0.00%|
   909|         0|            0|            0|  0.00%|        Data written to the wrapped file is decoded according
   910|         0|            0|            0|  0.00%|        to the given data_encoding and then encoded to the underlying
   911|         0|            0|            0|  0.00%|        file using file_encoding. The intermediate data type
   912|         0|            0|            0|  0.00%|        will usually be Unicode but depends on the specified codecs.
   913|         0|            0|            0|  0.00%|
   914|         0|            0|            0|  0.00%|        Bytes read from the file are decoded using file_encoding and then
   915|         0|            0|            0|  0.00%|        passed back to the caller encoded using data_encoding.
   916|         0|            0|            0|  0.00%|
   917|         0|            0|            0|  0.00%|        If file_encoding is not given, it defaults to data_encoding.
   918|         0|            0|            0|  0.00%|
   919|         0|            0|            0|  0.00%|        errors may be given to define the error handling. It defaults
   920|         0|            0|            0|  0.00%|        to 'strict' which causes ValueErrors to be raised in case an
   921|         0|            0|            0|  0.00%|        encoding error occurs.
   922|         0|            0|            0|  0.00%|
   923|         0|            0|            0|  0.00%|        The returned wrapped file object provides two extra attributes
   924|         0|            0|            0|  0.00%|        .data_encoding and .file_encoding which reflect the given
   925|         0|            0|            0|  0.00%|        parameters of the same name. The attributes can be used for
   926|         0|            0|            0|  0.00%|        introspection by Python programs.
   927|         0|            0|            0|  0.00%|
   928|         0|            0|            0|  0.00%|    """
   929|         0|            0|            0|  0.00%|    if file_encoding is None:
   930|         0|            0|            0|  0.00%|        file_encoding = data_encoding
   931|         0|            0|            0|  0.00%|    data_info = lookup(data_encoding)
   932|         0|            0|            0|  0.00%|    file_info = lookup(file_encoding)
   933|         0|            0|            0|  0.00%|    sr = StreamRecoder(file, data_info.encode, data_info.decode,
   934|         0|            0|            0|  0.00%|                       file_info.streamreader, file_info.streamwriter, errors)
   935|         0|            0|            0|  0.00%|    # Add attributes to simplify introspection
   936|         0|            0|            0|  0.00%|    sr.data_encoding = data_encoding
   937|         0|            0|            0|  0.00%|    sr.file_encoding = file_encoding
   938|         0|            0|            0|  0.00%|    return sr
   939|         0|            0|            0|  0.00%|
   940|         0|            0|            0|  0.00%|### Helpers for codec lookup
   941|         0|            0|            0|  0.00%|
   942|         0|            0|            0|  0.00%|def getencoder(encoding):
   943|         0|            0|            0|  0.00%|
   944|         0|            0|            0|  0.00%|    """ Lookup up the codec for the given encoding and return
   945|         0|            0|            0|  0.00%|        its encoder function.
   946|         0|            0|            0|  0.00%|
   947|         0|            0|            0|  0.00%|        Raises a LookupError in case the encoding cannot be found.
   948|         0|            0|            0|  0.00%|
   949|         0|            0|            0|  0.00%|    """
   950|         0|            0|            0|  0.00%|    return lookup(encoding).encode
   951|         0|            0|            0|  0.00%|
   952|         0|            0|            0|  0.00%|def getdecoder(encoding):
   953|         0|            0|            0|  0.00%|
   954|         0|            0|            0|  0.00%|    """ Lookup up the codec for the given encoding and return
   955|         0|            0|            0|  0.00%|        its decoder function.
   956|         0|            0|            0|  0.00%|
   957|         0|            0|            0|  0.00%|        Raises a LookupError in case the encoding cannot be found.
   958|         0|            0|            0|  0.00%|
   959|         0|            0|            0|  0.00%|    """
   960|         0|            0|            0|  0.00%|    return lookup(encoding).decode
   961|         0|            0|            0|  0.00%|
   962|         0|            0|            0|  0.00%|def getincrementalencoder(encoding):
   963|         0|            0|            0|  0.00%|
   964|         0|            0|            0|  0.00%|    """ Lookup up the codec for the given encoding and return
   965|         0|            0|            0|  0.00%|        its IncrementalEncoder class or factory function.
   966|         0|            0|            0|  0.00%|
   967|         0|            0|            0|  0.00%|        Raises a LookupError in case the encoding cannot be found
   968|         0|            0|            0|  0.00%|        or the codecs doesn't provide an incremental encoder.
   969|         0|            0|            0|  0.00%|
   970|         0|            0|            0|  0.00%|    """
   971|         0|            0|            0|  0.00%|    encoder = lookup(encoding).incrementalencoder
   972|         0|            0|            0|  0.00%|    if encoder is None:
   973|         0|            0|            0|  0.00%|        raise LookupError(encoding)
   974|         0|            0|            0|  0.00%|    return encoder
   975|         0|            0|            0|  0.00%|
   976|         0|            0|            0|  0.00%|def getincrementaldecoder(encoding):
   977|         0|            0|            0|  0.00%|
   978|         0|            0|            0|  0.00%|    """ Lookup up the codec for the given encoding and return
   979|         0|            0|            0|  0.00%|        its IncrementalDecoder class or factory function.
   980|         0|            0|            0|  0.00%|
   981|         0|            0|            0|  0.00%|        Raises a LookupError in case the encoding cannot be found
   982|         0|            0|            0|  0.00%|        or the codecs doesn't provide an incremental decoder.
   983|         0|            0|            0|  0.00%|
   984|         0|            0|            0|  0.00%|    """
   985|         0|            0|            0|  0.00%|    decoder = lookup(encoding).incrementaldecoder
   986|         0|            0|            0|  0.00%|    if decoder is None:
   987|         0|            0|            0|  0.00%|        raise LookupError(encoding)
   988|         0|            0|            0|  0.00%|    return decoder
   989|         0|            0|            0|  0.00%|
   990|         0|            0|            0|  0.00%|def getreader(encoding):
   991|         0|            0|            0|  0.00%|
   992|         0|            0|            0|  0.00%|    """ Lookup up the codec for the given encoding and return
   993|         0|            0|            0|  0.00%|        its StreamReader class or factory function.
   994|         0|            0|            0|  0.00%|
   995|         0|            0|            0|  0.00%|        Raises a LookupError in case the encoding cannot be found.
   996|         0|            0|            0|  0.00%|
   997|         0|            0|            0|  0.00%|    """
   998|         0|            0|            0|  0.00%|    return lookup(encoding).streamreader
   999|         0|            0|            0|  0.00%|
  1000|         0|            0|            0|  0.00%|def getwriter(encoding):
  1001|         0|            0|            0|  0.00%|
  1002|         0|            0|            0|  0.00%|    """ Lookup up the codec for the given encoding and return
  1003|         0|            0|            0|  0.00%|        its StreamWriter class or factory function.
  1004|         0|            0|            0|  0.00%|
  1005|         0|            0|            0|  0.00%|        Raises a LookupError in case the encoding cannot be found.
  1006|         0|            0|            0|  0.00%|
  1007|         0|            0|            0|  0.00%|    """
  1008|         0|            0|            0|  0.00%|    return lookup(encoding).streamwriter
  1009|         0|            0|            0|  0.00%|
  1010|         0|            0|            0|  0.00%|def iterencode(iterator, encoding, errors='strict', **kwargs):
  1011|         0|            0|            0|  0.00%|    """
  1012|         0|            0|            0|  0.00%|    Encoding iterator.
  1013|         0|            0|            0|  0.00%|
  1014|         0|            0|            0|  0.00%|    Encodes the input strings from the iterator using an IncrementalEncoder.
  1015|         0|            0|            0|  0.00%|
  1016|         0|            0|            0|  0.00%|    errors and kwargs are passed through to the IncrementalEncoder
  1017|         0|            0|            0|  0.00%|    constructor.
  1018|         0|            0|            0|  0.00%|    """
  1019|         0|            0|            0|  0.00%|    encoder = getincrementalencoder(encoding)(errors, **kwargs)
  1020|         0|            0|            0|  0.00%|    for input in iterator:
  1021|         0|            0|            0|  0.00%|        output = encoder.encode(input)
  1022|         0|            0|            0|  0.00%|        if output:
  1023|         0|            0|            0|  0.00%|            yield output
  1024|         0|            0|            0|  0.00%|    output = encoder.encode("", True)
  1025|         0|            0|            0|  0.00%|    if output:
  1026|         0|            0|            0|  0.00%|        yield output
  1027|         0|            0|            0|  0.00%|
  1028|         0|            0|            0|  0.00%|def iterdecode(iterator, encoding, errors='strict', **kwargs):
  1029|         0|            0|            0|  0.00%|    """
  1030|         0|            0|            0|  0.00%|    Decoding iterator.
  1031|         0|            0|            0|  0.00%|
  1032|         0|            0|            0|  0.00%|    Decodes the input strings from the iterator using an IncrementalDecoder.
  1033|         0|            0|            0|  0.00%|
  1034|         0|            0|            0|  0.00%|    errors and kwargs are passed through to the IncrementalDecoder
  1035|         0|            0|            0|  0.00%|    constructor.
  1036|         0|            0|            0|  0.00%|    """
  1037|         0|            0|            0|  0.00%|    decoder = getincrementaldecoder(encoding)(errors, **kwargs)
  1038|         0|            0|            0|  0.00%|    for input in iterator:
  1039|         0|            0|            0|  0.00%|        output = decoder.decode(input)
  1040|         0|            0|            0|  0.00%|        if output:
  1041|         0|            0|            0|  0.00%|            yield output
  1042|         0|            0|            0|  0.00%|    output = decoder.decode(b"", True)
  1043|         0|            0|            0|  0.00%|    if output:
  1044|         0|            0|            0|  0.00%|        yield output
  1045|         0|            0|            0|  0.00%|
  1046|         0|            0|            0|  0.00%|### Helpers for charmap-based codecs
  1047|         0|            0|            0|  0.00%|
  1048|         0|            0|            0|  0.00%|def make_identity_dict(rng):
  1049|         0|            0|            0|  0.00%|
  1050|         0|            0|            0|  0.00%|    """ make_identity_dict(rng) -> dict
  1051|         0|            0|            0|  0.00%|
  1052|         0|            0|            0|  0.00%|        Return a dictionary where elements of the rng sequence are
  1053|         0|            0|            0|  0.00%|        mapped to themselves.
  1054|         0|            0|            0|  0.00%|
  1055|         0|            0|            0|  0.00%|    """
  1056|         0|            0|            0|  0.00%|    return {i:i for i in rng}
  1057|         0|            0|            0|  0.00%|
  1058|         0|            0|            0|  0.00%|def make_encoding_map(decoding_map):
  1059|         0|            0|            0|  0.00%|
  1060|         0|            0|            0|  0.00%|    """ Creates an encoding map from a decoding map.
  1061|         0|            0|            0|  0.00%|
  1062|         0|            0|            0|  0.00%|        If a target mapping in the decoding map occurs multiple
  1063|         0|            0|            0|  0.00%|        times, then that target is mapped to None (undefined mapping),
  1064|         0|            0|            0|  0.00%|        causing an exception when encountered by the charmap codec
  1065|         0|            0|            0|  0.00%|        during translation.
  1066|         0|            0|            0|  0.00%|
  1067|         0|            0|            0|  0.00%|        One example where this happens is cp875.py which decodes
  1068|         0|            0|            0|  0.00%|        multiple character to \\u001a.
  1069|         0|            0|            0|  0.00%|
  1070|         0|            0|            0|  0.00%|    """
  1071|         0|            0|            0|  0.00%|    m = {}
  1072|         0|            0|            0|  0.00%|    for k,v in decoding_map.items():
  1073|         0|            0|            0|  0.00%|        if not v in m:
  1074|         0|            0|            0|  0.00%|            m[v] = k
  1075|         0|            0|            0|  0.00%|        else:
  1076|         0|            0|            0|  0.00%|            m[v] = None
  1077|         0|            0|            0|  0.00%|    return m
  1078|         0|            0|            0|  0.00%|
  1079|         0|            0|            0|  0.00%|### error handlers
  1080|         0|            0|            0|  0.00%|
  1081|         0|            0|            0|  0.00%|try:
  1082|         0|            0|            0|  0.00%|    strict_errors = lookup_error("strict")
  1083|         0|            0|            0|  0.00%|    ignore_errors = lookup_error("ignore")
  1084|         0|            0|            0|  0.00%|    replace_errors = lookup_error("replace")
  1085|         0|            0|            0|  0.00%|    xmlcharrefreplace_errors = lookup_error("xmlcharrefreplace")
  1086|         0|            0|            0|  0.00%|    backslashreplace_errors = lookup_error("backslashreplace")
  1087|         0|            0|            0|  0.00%|    namereplace_errors = lookup_error("namereplace")
  1088|         0|            0|            0|  0.00%|except LookupError:
  1089|         0|            0|            0|  0.00%|    # In --disable-unicode builds, these error handler are missing
  1090|         0|            0|            0|  0.00%|    strict_errors = None
  1091|         0|            0|            0|  0.00%|    ignore_errors = None
  1092|         0|            0|            0|  0.00%|    replace_errors = None
  1093|         0|            0|            0|  0.00%|    xmlcharrefreplace_errors = None
  1094|         0|            0|            0|  0.00%|    backslashreplace_errors = None
  1095|         0|            0|            0|  0.00%|    namereplace_errors = None
  1096|         0|            0|            0|  0.00%|
  1097|         0|            0|            0|  0.00%|# Tell modulefinder that using codecs probably needs the encodings
  1098|         0|            0|            0|  0.00%|# package
  1099|         0|            0|            0|  0.00%|_false = 0
  1100|         0|            0|            0|  0.00%|if _false:
  1101|         0|            0|            0|  0.00%|    import encodings
  1102|         0|            0|            0|  0.00%|
  1103|         0|            0|            0|  0.00%|### Tests
  1104|         0|            0|            0|  0.00%|
  1105|         0|            0|            0|  0.00%|if __name__ == '__main__':
  1106|         0|            0|            0|  0.00%|
  1107|         0|            0|            0|  0.00%|    # Make stdout translate Latin-1 output into UTF-8 output
  1108|         0|            0|            0|  0.00%|    sys.stdout = EncodedFile(sys.stdout, 'latin-1', 'utf-8')
  1109|         0|            0|            0|  0.00%|
  1110|         0|            0|            0|  0.00%|    # Have stdin translate Latin-1 input into UTF-8 input
  1111|         0|            0|            0|  0.00%|    sys.stdin = EncodedFile(sys.stdin, 'utf-8', 'latin-1')
File: C:\Python36-32\lib\encodings\cp1250.py
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|""" Python Character Mapping Codec cp1250 generated from 'MAPPINGS/VENDORS/MICSFT/WINDOWS/CP1250.TXT' with gencodec.py.
     2|         0|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|"""#"
     4|         0|            0|            0|  0.00%|
     5|         0|            0|            0|  0.00%|import codecs
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|### Codec APIs
     8|         0|            0|            0|  0.00%|
     9|         0|            0|            0|  0.00%|class Codec(codecs.Codec):
    10|         0|            0|            0|  0.00%|
    11|         0|            0|            0|  0.00%|    def encode(self,input,errors='strict'):
    12|         0|            0|            0|  0.00%|        return codecs.charmap_encode(input,errors,encoding_table)
    13|         0|            0|            0|  0.00%|
    14|         0|            0|            0|  0.00%|    def decode(self,input,errors='strict'):
    15|         0|            0|            0|  0.00%|        return codecs.charmap_decode(input,errors,decoding_table)
    16|         0|            0|            0|  0.00%|
    17|         0|            0|            0|  0.00%|class IncrementalEncoder(codecs.IncrementalEncoder):
    18|         0|            0|            0|  0.00%|    def encode(self, input, final=False):
    19|         0|            0|            0|  0.00%|        return codecs.charmap_encode(input,self.errors,encoding_table)[0]
    20|         0|            0|            0|  0.00%|
    21|         0|            0|            0|  0.00%|class IncrementalDecoder(codecs.IncrementalDecoder):
    22|         6|            0|            0|  0.00%|    def decode(self, input, final=False):
    23|         6|            0|            0|  0.00%|        return codecs.charmap_decode(input,self.errors,decoding_table)[0]
    24|         0|            0|            0|  0.00%|
    25|         0|            0|            0|  0.00%|class StreamWriter(Codec,codecs.StreamWriter):
    26|         0|            0|            0|  0.00%|    pass
    27|         0|            0|            0|  0.00%|
    28|         0|            0|            0|  0.00%|class StreamReader(Codec,codecs.StreamReader):
    29|         0|            0|            0|  0.00%|    pass
    30|         0|            0|            0|  0.00%|
    31|         0|            0|            0|  0.00%|### encodings module API
    32|         0|            0|            0|  0.00%|
    33|         0|            0|            0|  0.00%|def getregentry():
    34|         0|            0|            0|  0.00%|    return codecs.CodecInfo(
    35|         0|            0|            0|  0.00%|        name='cp1250',
    36|         0|            0|            0|  0.00%|        encode=Codec().encode,
    37|         0|            0|            0|  0.00%|        decode=Codec().decode,
    38|         0|            0|            0|  0.00%|        incrementalencoder=IncrementalEncoder,
    39|         0|            0|            0|  0.00%|        incrementaldecoder=IncrementalDecoder,
    40|         0|            0|            0|  0.00%|        streamreader=StreamReader,
    41|         0|            0|            0|  0.00%|        streamwriter=StreamWriter,
    42|         0|            0|            0|  0.00%|    )
    43|         0|            0|            0|  0.00%|
    44|         0|            0|            0|  0.00%|
    45|         0|            0|            0|  0.00%|### Decoding Table
    46|         0|            0|            0|  0.00%|
    47|         0|            0|            0|  0.00%|decoding_table = (
    48|         0|            0|            0|  0.00%|    '\x00'     #  0x00 -> NULL
    49|         0|            0|            0|  0.00%|    '\x01'     #  0x01 -> START OF HEADING
    50|         0|            0|            0|  0.00%|    '\x02'     #  0x02 -> START OF TEXT
    51|         0|            0|            0|  0.00%|    '\x03'     #  0x03 -> END OF TEXT
    52|         0|            0|            0|  0.00%|    '\x04'     #  0x04 -> END OF TRANSMISSION
    53|         0|            0|            0|  0.00%|    '\x05'     #  0x05 -> ENQUIRY
    54|         0|            0|            0|  0.00%|    '\x06'     #  0x06 -> ACKNOWLEDGE
    55|         0|            0|            0|  0.00%|    '\x07'     #  0x07 -> BELL
    56|         0|            0|            0|  0.00%|    '\x08'     #  0x08 -> BACKSPACE
    57|         0|            0|            0|  0.00%|    '\t'       #  0x09 -> HORIZONTAL TABULATION
    58|         0|            0|            0|  0.00%|    '\n'       #  0x0A -> LINE FEED
    59|         0|            0|            0|  0.00%|    '\x0b'     #  0x0B -> VERTICAL TABULATION
    60|         0|            0|            0|  0.00%|    '\x0c'     #  0x0C -> FORM FEED
    61|         0|            0|            0|  0.00%|    '\r'       #  0x0D -> CARRIAGE RETURN
    62|         0|            0|            0|  0.00%|    '\x0e'     #  0x0E -> SHIFT OUT
    63|         0|            0|            0|  0.00%|    '\x0f'     #  0x0F -> SHIFT IN
    64|         0|            0|            0|  0.00%|    '\x10'     #  0x10 -> DATA LINK ESCAPE
    65|         0|            0|            0|  0.00%|    '\x11'     #  0x11 -> DEVICE CONTROL ONE
    66|         0|            0|            0|  0.00%|    '\x12'     #  0x12 -> DEVICE CONTROL TWO
    67|         0|            0|            0|  0.00%|    '\x13'     #  0x13 -> DEVICE CONTROL THREE
    68|         0|            0|            0|  0.00%|    '\x14'     #  0x14 -> DEVICE CONTROL FOUR
    69|         0|            0|            0|  0.00%|    '\x15'     #  0x15 -> NEGATIVE ACKNOWLEDGE
    70|         0|            0|            0|  0.00%|    '\x16'     #  0x16 -> SYNCHRONOUS IDLE
    71|         0|            0|            0|  0.00%|    '\x17'     #  0x17 -> END OF TRANSMISSION BLOCK
    72|         0|            0|            0|  0.00%|    '\x18'     #  0x18 -> CANCEL
    73|         0|            0|            0|  0.00%|    '\x19'     #  0x19 -> END OF MEDIUM
    74|         0|            0|            0|  0.00%|    '\x1a'     #  0x1A -> SUBSTITUTE
    75|         0|            0|            0|  0.00%|    '\x1b'     #  0x1B -> ESCAPE
    76|         0|            0|            0|  0.00%|    '\x1c'     #  0x1C -> FILE SEPARATOR
    77|         0|            0|            0|  0.00%|    '\x1d'     #  0x1D -> GROUP SEPARATOR
    78|         0|            0|            0|  0.00%|    '\x1e'     #  0x1E -> RECORD SEPARATOR
    79|         0|            0|            0|  0.00%|    '\x1f'     #  0x1F -> UNIT SEPARATOR
    80|         0|            0|            0|  0.00%|    ' '        #  0x20 -> SPACE
    81|         0|            0|            0|  0.00%|    '!'        #  0x21 -> EXCLAMATION MARK
    82|         0|            0|            0|  0.00%|    '"'        #  0x22 -> QUOTATION MARK
    83|         0|            0|            0|  0.00%|    '#'        #  0x23 -> NUMBER SIGN
    84|         0|            0|            0|  0.00%|    '$'        #  0x24 -> DOLLAR SIGN
    85|         0|            0|            0|  0.00%|    '%'        #  0x25 -> PERCENT SIGN
    86|         0|            0|            0|  0.00%|    '&'        #  0x26 -> AMPERSAND
    87|         0|            0|            0|  0.00%|    "'"        #  0x27 -> APOSTROPHE
    88|         0|            0|            0|  0.00%|    '('        #  0x28 -> LEFT PARENTHESIS
    89|         0|            0|            0|  0.00%|    ')'        #  0x29 -> RIGHT PARENTHESIS
    90|         0|            0|            0|  0.00%|    '*'        #  0x2A -> ASTERISK
    91|         0|            0|            0|  0.00%|    '+'        #  0x2B -> PLUS SIGN
    92|         0|            0|            0|  0.00%|    ','        #  0x2C -> COMMA
    93|         0|            0|            0|  0.00%|    '-'        #  0x2D -> HYPHEN-MINUS
    94|         0|            0|            0|  0.00%|    '.'        #  0x2E -> FULL STOP
    95|         0|            0|            0|  0.00%|    '/'        #  0x2F -> SOLIDUS
    96|         0|            0|            0|  0.00%|    '0'        #  0x30 -> DIGIT ZERO
    97|         0|            0|            0|  0.00%|    '1'        #  0x31 -> DIGIT ONE
    98|         0|            0|            0|  0.00%|    '2'        #  0x32 -> DIGIT TWO
    99|         0|            0|            0|  0.00%|    '3'        #  0x33 -> DIGIT THREE
   100|         0|            0|            0|  0.00%|    '4'        #  0x34 -> DIGIT FOUR
   101|         0|            0|            0|  0.00%|    '5'        #  0x35 -> DIGIT FIVE
   102|         0|            0|            0|  0.00%|    '6'        #  0x36 -> DIGIT SIX
   103|         0|            0|            0|  0.00%|    '7'        #  0x37 -> DIGIT SEVEN
   104|         0|            0|            0|  0.00%|    '8'        #  0x38 -> DIGIT EIGHT
   105|         0|            0|            0|  0.00%|    '9'        #  0x39 -> DIGIT NINE
   106|         0|            0|            0|  0.00%|    ':'        #  0x3A -> COLON
   107|         0|            0|            0|  0.00%|    ';'        #  0x3B -> SEMICOLON
   108|         0|            0|            0|  0.00%|    '<'        #  0x3C -> LESS-THAN SIGN
   109|         0|            0|            0|  0.00%|    '='        #  0x3D -> EQUALS SIGN
   110|         0|            0|            0|  0.00%|    '>'        #  0x3E -> GREATER-THAN SIGN
   111|         0|            0|            0|  0.00%|    '?'        #  0x3F -> QUESTION MARK
   112|         0|            0|            0|  0.00%|    '@'        #  0x40 -> COMMERCIAL AT
   113|         0|            0|            0|  0.00%|    'A'        #  0x41 -> LATIN CAPITAL LETTER A
   114|         0|            0|            0|  0.00%|    'B'        #  0x42 -> LATIN CAPITAL LETTER B
   115|         0|            0|            0|  0.00%|    'C'        #  0x43 -> LATIN CAPITAL LETTER C
   116|         0|            0|            0|  0.00%|    'D'        #  0x44 -> LATIN CAPITAL LETTER D
   117|         0|            0|            0|  0.00%|    'E'        #  0x45 -> LATIN CAPITAL LETTER E
   118|         0|            0|            0|  0.00%|    'F'        #  0x46 -> LATIN CAPITAL LETTER F
   119|         0|            0|            0|  0.00%|    'G'        #  0x47 -> LATIN CAPITAL LETTER G
   120|         0|            0|            0|  0.00%|    'H'        #  0x48 -> LATIN CAPITAL LETTER H
   121|         0|            0|            0|  0.00%|    'I'        #  0x49 -> LATIN CAPITAL LETTER I
   122|         0|            0|            0|  0.00%|    'J'        #  0x4A -> LATIN CAPITAL LETTER J
   123|         0|            0|            0|  0.00%|    'K'        #  0x4B -> LATIN CAPITAL LETTER K
   124|         0|            0|            0|  0.00%|    'L'        #  0x4C -> LATIN CAPITAL LETTER L
   125|         0|            0|            0|  0.00%|    'M'        #  0x4D -> LATIN CAPITAL LETTER M
   126|         0|            0|            0|  0.00%|    'N'        #  0x4E -> LATIN CAPITAL LETTER N
   127|         0|            0|            0|  0.00%|    'O'        #  0x4F -> LATIN CAPITAL LETTER O
   128|         0|            0|            0|  0.00%|    'P'        #  0x50 -> LATIN CAPITAL LETTER P
   129|         0|            0|            0|  0.00%|    'Q'        #  0x51 -> LATIN CAPITAL LETTER Q
   130|         0|            0|            0|  0.00%|    'R'        #  0x52 -> LATIN CAPITAL LETTER R
   131|         0|            0|            0|  0.00%|    'S'        #  0x53 -> LATIN CAPITAL LETTER S
   132|         0|            0|            0|  0.00%|    'T'        #  0x54 -> LATIN CAPITAL LETTER T
   133|         0|            0|            0|  0.00%|    'U'        #  0x55 -> LATIN CAPITAL LETTER U
   134|         0|            0|            0|  0.00%|    'V'        #  0x56 -> LATIN CAPITAL LETTER V
   135|         0|            0|            0|  0.00%|    'W'        #  0x57 -> LATIN CAPITAL LETTER W
   136|         0|            0|            0|  0.00%|    'X'        #  0x58 -> LATIN CAPITAL LETTER X
   137|         0|            0|            0|  0.00%|    'Y'        #  0x59 -> LATIN CAPITAL LETTER Y
   138|         0|            0|            0|  0.00%|    'Z'        #  0x5A -> LATIN CAPITAL LETTER Z
   139|         0|            0|            0|  0.00%|    '['        #  0x5B -> LEFT SQUARE BRACKET
   140|         0|            0|            0|  0.00%|    '\\'       #  0x5C -> REVERSE SOLIDUS
   141|         0|            0|            0|  0.00%|    ']'        #  0x5D -> RIGHT SQUARE BRACKET
   142|         0|            0|            0|  0.00%|    '^'        #  0x5E -> CIRCUMFLEX ACCENT
   143|         0|            0|            0|  0.00%|    '_'        #  0x5F -> LOW LINE
   144|         0|            0|            0|  0.00%|    '`'        #  0x60 -> GRAVE ACCENT
   145|         0|            0|            0|  0.00%|    'a'        #  0x61 -> LATIN SMALL LETTER A
   146|         0|            0|            0|  0.00%|    'b'        #  0x62 -> LATIN SMALL LETTER B
   147|         0|            0|            0|  0.00%|    'c'        #  0x63 -> LATIN SMALL LETTER C
   148|         0|            0|            0|  0.00%|    'd'        #  0x64 -> LATIN SMALL LETTER D
   149|         0|            0|            0|  0.00%|    'e'        #  0x65 -> LATIN SMALL LETTER E
   150|         0|            0|            0|  0.00%|    'f'        #  0x66 -> LATIN SMALL LETTER F
   151|         0|            0|            0|  0.00%|    'g'        #  0x67 -> LATIN SMALL LETTER G
   152|         0|            0|            0|  0.00%|    'h'        #  0x68 -> LATIN SMALL LETTER H
   153|         0|            0|            0|  0.00%|    'i'        #  0x69 -> LATIN SMALL LETTER I
   154|         0|            0|            0|  0.00%|    'j'        #  0x6A -> LATIN SMALL LETTER J
   155|         0|            0|            0|  0.00%|    'k'        #  0x6B -> LATIN SMALL LETTER K
   156|         0|            0|            0|  0.00%|    'l'        #  0x6C -> LATIN SMALL LETTER L
   157|         0|            0|            0|  0.00%|    'm'        #  0x6D -> LATIN SMALL LETTER M
   158|         0|            0|            0|  0.00%|    'n'        #  0x6E -> LATIN SMALL LETTER N
   159|         0|            0|            0|  0.00%|    'o'        #  0x6F -> LATIN SMALL LETTER O
   160|         0|            0|            0|  0.00%|    'p'        #  0x70 -> LATIN SMALL LETTER P
   161|         0|            0|            0|  0.00%|    'q'        #  0x71 -> LATIN SMALL LETTER Q
   162|         0|            0|            0|  0.00%|    'r'        #  0x72 -> LATIN SMALL LETTER R
   163|         0|            0|            0|  0.00%|    's'        #  0x73 -> LATIN SMALL LETTER S
   164|         0|            0|            0|  0.00%|    't'        #  0x74 -> LATIN SMALL LETTER T
   165|         0|            0|            0|  0.00%|    'u'        #  0x75 -> LATIN SMALL LETTER U
   166|         0|            0|            0|  0.00%|    'v'        #  0x76 -> LATIN SMALL LETTER V
   167|         0|            0|            0|  0.00%|    'w'        #  0x77 -> LATIN SMALL LETTER W
   168|         0|            0|            0|  0.00%|    'x'        #  0x78 -> LATIN SMALL LETTER X
   169|         0|            0|            0|  0.00%|    'y'        #  0x79 -> LATIN SMALL LETTER Y
   170|         0|            0|            0|  0.00%|    'z'        #  0x7A -> LATIN SMALL LETTER Z
   171|         0|            0|            0|  0.00%|    '{'        #  0x7B -> LEFT CURLY BRACKET
   172|         0|            0|            0|  0.00%|    '|'        #  0x7C -> VERTICAL LINE
   173|         0|            0|            0|  0.00%|    '}'        #  0x7D -> RIGHT CURLY BRACKET
   174|         0|            0|            0|  0.00%|    '~'        #  0x7E -> TILDE
   175|         0|            0|            0|  0.00%|    '\x7f'     #  0x7F -> DELETE
   176|         0|            0|            0|  0.00%|    '\u20ac'   #  0x80 -> EURO SIGN
   177|         0|            0|            0|  0.00%|    '\ufffe'   #  0x81 -> UNDEFINED
   178|         0|            0|            0|  0.00%|    '\u201a'   #  0x82 -> SINGLE LOW-9 QUOTATION MARK
   179|         0|            0|            0|  0.00%|    '\ufffe'   #  0x83 -> UNDEFINED
   180|         0|            0|            0|  0.00%|    '\u201e'   #  0x84 -> DOUBLE LOW-9 QUOTATION MARK
   181|         0|            0|            0|  0.00%|    '\u2026'   #  0x85 -> HORIZONTAL ELLIPSIS
   182|         0|            0|            0|  0.00%|    '\u2020'   #  0x86 -> DAGGER
   183|         0|            0|            0|  0.00%|    '\u2021'   #  0x87 -> DOUBLE DAGGER
   184|         0|            0|            0|  0.00%|    '\ufffe'   #  0x88 -> UNDEFINED
   185|         0|            0|            0|  0.00%|    '\u2030'   #  0x89 -> PER MILLE SIGN
   186|         0|            0|            0|  0.00%|    '\u0160'   #  0x8A -> LATIN CAPITAL LETTER S WITH CARON
   187|         0|            0|            0|  0.00%|    '\u2039'   #  0x8B -> SINGLE LEFT-POINTING ANGLE QUOTATION MARK
   188|         0|            0|            0|  0.00%|    '\u015a'   #  0x8C -> LATIN CAPITAL LETTER S WITH ACUTE
   189|         0|            0|            0|  0.00%|    '\u0164'   #  0x8D -> LATIN CAPITAL LETTER T WITH CARON
   190|         0|            0|            0|  0.00%|    '\u017d'   #  0x8E -> LATIN CAPITAL LETTER Z WITH CARON
   191|         0|            0|            0|  0.00%|    '\u0179'   #  0x8F -> LATIN CAPITAL LETTER Z WITH ACUTE
   192|         0|            0|            0|  0.00%|    '\ufffe'   #  0x90 -> UNDEFINED
   193|         0|            0|            0|  0.00%|    '\u2018'   #  0x91 -> LEFT SINGLE QUOTATION MARK
   194|         0|            0|            0|  0.00%|    '\u2019'   #  0x92 -> RIGHT SINGLE QUOTATION MARK
   195|         0|            0|            0|  0.00%|    '\u201c'   #  0x93 -> LEFT DOUBLE QUOTATION MARK
   196|         0|            0|            0|  0.00%|    '\u201d'   #  0x94 -> RIGHT DOUBLE QUOTATION MARK
   197|         0|            0|            0|  0.00%|    '\u2022'   #  0x95 -> BULLET
   198|         0|            0|            0|  0.00%|    '\u2013'   #  0x96 -> EN DASH
   199|         0|            0|            0|  0.00%|    '\u2014'   #  0x97 -> EM DASH
   200|         0|            0|            0|  0.00%|    '\ufffe'   #  0x98 -> UNDEFINED
   201|         0|            0|            0|  0.00%|    '\u2122'   #  0x99 -> TRADE MARK SIGN
   202|         0|            0|            0|  0.00%|    '\u0161'   #  0x9A -> LATIN SMALL LETTER S WITH CARON
   203|         0|            0|            0|  0.00%|    '\u203a'   #  0x9B -> SINGLE RIGHT-POINTING ANGLE QUOTATION MARK
   204|         0|            0|            0|  0.00%|    '\u015b'   #  0x9C -> LATIN SMALL LETTER S WITH ACUTE
   205|         0|            0|            0|  0.00%|    '\u0165'   #  0x9D -> LATIN SMALL LETTER T WITH CARON
   206|         0|            0|            0|  0.00%|    '\u017e'   #  0x9E -> LATIN SMALL LETTER Z WITH CARON
   207|         0|            0|            0|  0.00%|    '\u017a'   #  0x9F -> LATIN SMALL LETTER Z WITH ACUTE
   208|         0|            0|            0|  0.00%|    '\xa0'     #  0xA0 -> NO-BREAK SPACE
   209|         0|            0|            0|  0.00%|    '\u02c7'   #  0xA1 -> CARON
   210|         0|            0|            0|  0.00%|    '\u02d8'   #  0xA2 -> BREVE
   211|         0|            0|            0|  0.00%|    '\u0141'   #  0xA3 -> LATIN CAPITAL LETTER L WITH STROKE
   212|         0|            0|            0|  0.00%|    '\xa4'     #  0xA4 -> CURRENCY SIGN
   213|         0|            0|            0|  0.00%|    '\u0104'   #  0xA5 -> LATIN CAPITAL LETTER A WITH OGONEK
   214|         0|            0|            0|  0.00%|    '\xa6'     #  0xA6 -> BROKEN BAR
   215|         0|            0|            0|  0.00%|    '\xa7'     #  0xA7 -> SECTION SIGN
   216|         0|            0|            0|  0.00%|    '\xa8'     #  0xA8 -> DIAERESIS
   217|         0|            0|            0|  0.00%|    '\xa9'     #  0xA9 -> COPYRIGHT SIGN
   218|         0|            0|            0|  0.00%|    '\u015e'   #  0xAA -> LATIN CAPITAL LETTER S WITH CEDILLA
   219|         0|            0|            0|  0.00%|    '\xab'     #  0xAB -> LEFT-POINTING DOUBLE ANGLE QUOTATION MARK
   220|         0|            0|            0|  0.00%|    '\xac'     #  0xAC -> NOT SIGN
   221|         0|            0|            0|  0.00%|    '\xad'     #  0xAD -> SOFT HYPHEN
   222|         0|            0|            0|  0.00%|    '\xae'     #  0xAE -> REGISTERED SIGN
   223|         0|            0|            0|  0.00%|    '\u017b'   #  0xAF -> LATIN CAPITAL LETTER Z WITH DOT ABOVE
   224|         0|            0|            0|  0.00%|    '\xb0'     #  0xB0 -> DEGREE SIGN
   225|         0|            0|            0|  0.00%|    '\xb1'     #  0xB1 -> PLUS-MINUS SIGN
   226|         0|            0|            0|  0.00%|    '\u02db'   #  0xB2 -> OGONEK
   227|         0|            0|            0|  0.00%|    '\u0142'   #  0xB3 -> LATIN SMALL LETTER L WITH STROKE
   228|         0|            0|            0|  0.00%|    '\xb4'     #  0xB4 -> ACUTE ACCENT
   229|         0|            0|            0|  0.00%|    '\xb5'     #  0xB5 -> MICRO SIGN
   230|         0|            0|            0|  0.00%|    '\xb6'     #  0xB6 -> PILCROW SIGN
   231|         0|            0|            0|  0.00%|    '\xb7'     #  0xB7 -> MIDDLE DOT
   232|         0|            0|            0|  0.00%|    '\xb8'     #  0xB8 -> CEDILLA
   233|         0|            0|            0|  0.00%|    '\u0105'   #  0xB9 -> LATIN SMALL LETTER A WITH OGONEK
   234|         0|            0|            0|  0.00%|    '\u015f'   #  0xBA -> LATIN SMALL LETTER S WITH CEDILLA
   235|         0|            0|            0|  0.00%|    '\xbb'     #  0xBB -> RIGHT-POINTING DOUBLE ANGLE QUOTATION MARK
   236|         0|            0|            0|  0.00%|    '\u013d'   #  0xBC -> LATIN CAPITAL LETTER L WITH CARON
   237|         0|            0|            0|  0.00%|    '\u02dd'   #  0xBD -> DOUBLE ACUTE ACCENT
   238|         0|            0|            0|  0.00%|    '\u013e'   #  0xBE -> LATIN SMALL LETTER L WITH CARON
   239|         0|            0|            0|  0.00%|    '\u017c'   #  0xBF -> LATIN SMALL LETTER Z WITH DOT ABOVE
   240|         0|            0|            0|  0.00%|    '\u0154'   #  0xC0 -> LATIN CAPITAL LETTER R WITH ACUTE
   241|         0|            0|            0|  0.00%|    '\xc1'     #  0xC1 -> LATIN CAPITAL LETTER A WITH ACUTE
   242|         0|            0|            0|  0.00%|    '\xc2'     #  0xC2 -> LATIN CAPITAL LETTER A WITH CIRCUMFLEX
   243|         0|            0|            0|  0.00%|    '\u0102'   #  0xC3 -> LATIN CAPITAL LETTER A WITH BREVE
   244|         0|            0|            0|  0.00%|    '\xc4'     #  0xC4 -> LATIN CAPITAL LETTER A WITH DIAERESIS
   245|         0|            0|            0|  0.00%|    '\u0139'   #  0xC5 -> LATIN CAPITAL LETTER L WITH ACUTE
   246|         0|            0|            0|  0.00%|    '\u0106'   #  0xC6 -> LATIN CAPITAL LETTER C WITH ACUTE
   247|         0|            0|            0|  0.00%|    '\xc7'     #  0xC7 -> LATIN CAPITAL LETTER C WITH CEDILLA
   248|         0|            0|            0|  0.00%|    '\u010c'   #  0xC8 -> LATIN CAPITAL LETTER C WITH CARON
   249|         0|            0|            0|  0.00%|    '\xc9'     #  0xC9 -> LATIN CAPITAL LETTER E WITH ACUTE
   250|         0|            0|            0|  0.00%|    '\u0118'   #  0xCA -> LATIN CAPITAL LETTER E WITH OGONEK
   251|         0|            0|            0|  0.00%|    '\xcb'     #  0xCB -> LATIN CAPITAL LETTER E WITH DIAERESIS
   252|         0|            0|            0|  0.00%|    '\u011a'   #  0xCC -> LATIN CAPITAL LETTER E WITH CARON
   253|         0|            0|            0|  0.00%|    '\xcd'     #  0xCD -> LATIN CAPITAL LETTER I WITH ACUTE
   254|         0|            0|            0|  0.00%|    '\xce'     #  0xCE -> LATIN CAPITAL LETTER I WITH CIRCUMFLEX
   255|         0|            0|            0|  0.00%|    '\u010e'   #  0xCF -> LATIN CAPITAL LETTER D WITH CARON
   256|         0|            0|            0|  0.00%|    '\u0110'   #  0xD0 -> LATIN CAPITAL LETTER D WITH STROKE
   257|         0|            0|            0|  0.00%|    '\u0143'   #  0xD1 -> LATIN CAPITAL LETTER N WITH ACUTE
   258|         0|            0|            0|  0.00%|    '\u0147'   #  0xD2 -> LATIN CAPITAL LETTER N WITH CARON
   259|         0|            0|            0|  0.00%|    '\xd3'     #  0xD3 -> LATIN CAPITAL LETTER O WITH ACUTE
   260|         0|            0|            0|  0.00%|    '\xd4'     #  0xD4 -> LATIN CAPITAL LETTER O WITH CIRCUMFLEX
   261|         0|            0|            0|  0.00%|    '\u0150'   #  0xD5 -> LATIN CAPITAL LETTER O WITH DOUBLE ACUTE
   262|         0|            0|            0|  0.00%|    '\xd6'     #  0xD6 -> LATIN CAPITAL LETTER O WITH DIAERESIS
   263|         0|            0|            0|  0.00%|    '\xd7'     #  0xD7 -> MULTIPLICATION SIGN
   264|         0|            0|            0|  0.00%|    '\u0158'   #  0xD8 -> LATIN CAPITAL LETTER R WITH CARON
   265|         0|            0|            0|  0.00%|    '\u016e'   #  0xD9 -> LATIN CAPITAL LETTER U WITH RING ABOVE
   266|         0|            0|            0|  0.00%|    '\xda'     #  0xDA -> LATIN CAPITAL LETTER U WITH ACUTE
   267|         0|            0|            0|  0.00%|    '\u0170'   #  0xDB -> LATIN CAPITAL LETTER U WITH DOUBLE ACUTE
   268|         0|            0|            0|  0.00%|    '\xdc'     #  0xDC -> LATIN CAPITAL LETTER U WITH DIAERESIS
   269|         0|            0|            0|  0.00%|    '\xdd'     #  0xDD -> LATIN CAPITAL LETTER Y WITH ACUTE
   270|         0|            0|            0|  0.00%|    '\u0162'   #  0xDE -> LATIN CAPITAL LETTER T WITH CEDILLA
   271|         0|            0|            0|  0.00%|    '\xdf'     #  0xDF -> LATIN SMALL LETTER SHARP S
   272|         0|            0|            0|  0.00%|    '\u0155'   #  0xE0 -> LATIN SMALL LETTER R WITH ACUTE
   273|         0|            0|            0|  0.00%|    '\xe1'     #  0xE1 -> LATIN SMALL LETTER A WITH ACUTE
   274|         0|            0|            0|  0.00%|    '\xe2'     #  0xE2 -> LATIN SMALL LETTER A WITH CIRCUMFLEX
   275|         0|            0|            0|  0.00%|    '\u0103'   #  0xE3 -> LATIN SMALL LETTER A WITH BREVE
   276|         0|            0|            0|  0.00%|    '\xe4'     #  0xE4 -> LATIN SMALL LETTER A WITH DIAERESIS
   277|         0|            0|            0|  0.00%|    '\u013a'   #  0xE5 -> LATIN SMALL LETTER L WITH ACUTE
   278|         0|            0|            0|  0.00%|    '\u0107'   #  0xE6 -> LATIN SMALL LETTER C WITH ACUTE
   279|         0|            0|            0|  0.00%|    '\xe7'     #  0xE7 -> LATIN SMALL LETTER C WITH CEDILLA
   280|         0|            0|            0|  0.00%|    '\u010d'   #  0xE8 -> LATIN SMALL LETTER C WITH CARON
   281|         0|            0|            0|  0.00%|    '\xe9'     #  0xE9 -> LATIN SMALL LETTER E WITH ACUTE
   282|         0|            0|            0|  0.00%|    '\u0119'   #  0xEA -> LATIN SMALL LETTER E WITH OGONEK
   283|         0|            0|            0|  0.00%|    '\xeb'     #  0xEB -> LATIN SMALL LETTER E WITH DIAERESIS
   284|         0|            0|            0|  0.00%|    '\u011b'   #  0xEC -> LATIN SMALL LETTER E WITH CARON
   285|         0|            0|            0|  0.00%|    '\xed'     #  0xED -> LATIN SMALL LETTER I WITH ACUTE
   286|         0|            0|            0|  0.00%|    '\xee'     #  0xEE -> LATIN SMALL LETTER I WITH CIRCUMFLEX
   287|         0|            0|            0|  0.00%|    '\u010f'   #  0xEF -> LATIN SMALL LETTER D WITH CARON
   288|         0|            0|            0|  0.00%|    '\u0111'   #  0xF0 -> LATIN SMALL LETTER D WITH STROKE
   289|         0|            0|            0|  0.00%|    '\u0144'   #  0xF1 -> LATIN SMALL LETTER N WITH ACUTE
   290|         0|            0|            0|  0.00%|    '\u0148'   #  0xF2 -> LATIN SMALL LETTER N WITH CARON
   291|         0|            0|            0|  0.00%|    '\xf3'     #  0xF3 -> LATIN SMALL LETTER O WITH ACUTE
   292|         0|            0|            0|  0.00%|    '\xf4'     #  0xF4 -> LATIN SMALL LETTER O WITH CIRCUMFLEX
   293|         0|            0|            0|  0.00%|    '\u0151'   #  0xF5 -> LATIN SMALL LETTER O WITH DOUBLE ACUTE
   294|         0|            0|            0|  0.00%|    '\xf6'     #  0xF6 -> LATIN SMALL LETTER O WITH DIAERESIS
   295|         0|            0|            0|  0.00%|    '\xf7'     #  0xF7 -> DIVISION SIGN
   296|         0|            0|            0|  0.00%|    '\u0159'   #  0xF8 -> LATIN SMALL LETTER R WITH CARON
   297|         0|            0|            0|  0.00%|    '\u016f'   #  0xF9 -> LATIN SMALL LETTER U WITH RING ABOVE
   298|         0|            0|            0|  0.00%|    '\xfa'     #  0xFA -> LATIN SMALL LETTER U WITH ACUTE
   299|         0|            0|            0|  0.00%|    '\u0171'   #  0xFB -> LATIN SMALL LETTER U WITH DOUBLE ACUTE
   300|         0|            0|            0|  0.00%|    '\xfc'     #  0xFC -> LATIN SMALL LETTER U WITH DIAERESIS
   301|         0|            0|            0|  0.00%|    '\xfd'     #  0xFD -> LATIN SMALL LETTER Y WITH ACUTE
   302|         0|            0|            0|  0.00%|    '\u0163'   #  0xFE -> LATIN SMALL LETTER T WITH CEDILLA
   303|         0|            0|            0|  0.00%|    '\u02d9'   #  0xFF -> DOT ABOVE
   304|         0|            0|            0|  0.00%|)
   305|         0|            0|            0|  0.00%|
   306|         0|            0|            0|  0.00%|### Encoding table
   307|         0|            0|            0|  0.00%|encoding_table=codecs.charmap_build(decoding_table)
File: C:\Python36-32\lib\_bootlocale.py
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|"""A minimal subset of the locale module used at interpreter startup
     2|         0|            0|            0|  0.00%|(imported by the _io module), in order to reduce startup time.
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|Don't import directly from third-party code; use the `locale` module instead!
     5|         0|            0|            0|  0.00%|"""
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|import sys
     8|         0|            0|            0|  0.00%|import _locale
     9|         0|            0|            0|  0.00%|
    10|         0|            0|            0|  0.00%|if sys.platform.startswith("win"):
    11|         1|            0|            0|  0.00%|    def getpreferredencoding(do_setlocale=True):
    12|         1|            0|            0|  0.00%|        return _locale._getdefaultlocale()[1]
    13|         0|            0|            0|  0.00%|else:
    14|         0|            0|            0|  0.00%|    try:
    15|         0|            0|            0|  0.00%|        _locale.CODESET
    16|         0|            0|            0|  0.00%|    except AttributeError:
    17|         0|            0|            0|  0.00%|        def getpreferredencoding(do_setlocale=True):
    18|         0|            0|            0|  0.00%|            # This path for legacy systems needs the more complex
    19|         0|            0|            0|  0.00%|            # getdefaultlocale() function, import the full locale module.
    20|         0|            0|            0|  0.00%|            import locale
    21|         0|            0|            0|  0.00%|            return locale.getpreferredencoding(do_setlocale)
    22|         0|            0|            0|  0.00%|    else:
    23|         0|            0|            0|  0.00%|        def getpreferredencoding(do_setlocale=True):
    24|         0|            0|            0|  0.00%|            assert not do_setlocale
    25|         0|            0|            0|  0.00%|            result = _locale.nl_langinfo(_locale.CODESET)
    26|         0|            0|            0|  0.00%|            if not result and sys.platform == 'darwin':
    27|         0|            0|            0|  0.00%|                # nl_langinfo can return an empty string
    28|         0|            0|            0|  0.00%|                # when the setting has an invalid value.
    29|         0|            0|            0|  0.00%|                # Default to UTF-8 in that case because
    30|         0|            0|            0|  0.00%|                # UTF-8 is the default charset on OSX and
    31|         0|            0|            0|  0.00%|                # returning nothing will crash the
    32|         0|            0|            0|  0.00%|                # interpreter.
    33|         0|            0|            0|  0.00%|                result = 'UTF-8'
    34|         0|            0|            0|  0.00%|            return result
